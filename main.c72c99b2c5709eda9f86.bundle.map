{"version":3,"sources":["webpack:///main.c72c99b2c5709eda9f86.bundle.js","webpack:///./app/app.component.ts","webpack:///./app/app.module.ts","webpack:///./app/autocomplete/ng2-input-autocomplete.ts","webpack:///./app/main.ts","webpack:///./app/wikipedia.service.ts","webpack:///./~/@angular/http/bundles/http.umd.js"],"names":["webpackJsonp","297","module","exports","__webpack_require__","core_1","wikipedia_service_1","AppComponent","service","this","name","selectedItem","inputChanged","wikiItems","items","items2","id","payload","label","config2","placeholder","sourceField","prototype","onSelect","item","onInputChangedEvent","val","search","term","_this","subscribe","e","error","console","log","__decorate","Component","selector","template","providers","WikipediaService","__metadata","298","platform_browser_1","forms_1","http_1","app_component_1","ng2_input_autocomplete_1","AppModule","NgModule","imports","BrowserModule","AutocompleteModule","forRoot","FormsModule","HttpModule","JsonpModule","declarations","bootstrap","299","common_1","AutocompleteComponent","elementRef","selectEvent","EventEmitter","inputChangedEvent","thisElement","nativeElement","selectedIndex","showAutoComplete","value","ngOnInit","inputElement","querySelector","isNull","config","filterItems","focus","ngOnChanges","enterText","event","total","candidates","length","keyCode","preventDefault","target","emit","idx","candiatesLabels","field","filterItem","filter","buildLabels","getFieldValue","object","path","Array","result_1","forEach","element","undefined","map","result","toLowerCase","indexOf","Input","Object","Output","styles","ElementRef","AutocompleteDirective","resolver","viewContainerRef","ngModelChange","hideAutocomplete","componentRef","type","destroy","tabIndex","onInputChanged","ngModel","component","instance","createDiv","ngOnDestroy","unsubscribe","document","removeEventListener","changes","currentValue","showAutocomplete","createAutocomplete","createElement","style","display","position","parentElement","insertBefore","nextSibling","appendChild","addEventListener","factory","resolveComponentFactory","createComponent","autocompleteElement","location","tagName","rect","getBoundingClientRect","width","zIndex","top","left","String","HostListener","Function","Directive","ComponentFactoryResolver","ViewContainerRef","ngModule","CommonModule","entryComponents","0","platform_browser_dynamic_1","app_module_1","platformBrowserDynamic","bootstrapModule","300","jsonp","wikiUrl","params","URLSearchParams","set","get","response","json","Injectable","Jsonp","85","global","_angular_core","rxjs_Observable","_angular_platformBrowser","normalizeMethodName","method","toUpperCase","RequestMethod","Get","Post","Put","Delete","Options","Head","Patch","Error","getResponseURL","xhr","responseURL","test","getAllResponseHeaders","getResponseHeader","stringToArrayBuffer","input","view","Uint16Array","i","strLen","charCodeAt","buffer","paramParser","rawParams","Map","split","param","eqIdx","_a","slice","key","list","push","standardEncoding","v","encodeURIComponent","replace","_getJsonpConnections","w","window","_jsonpConnections","JSONP_HOME","httpRequest","backend","request","createConnection","mergeOptions","defaultOpts","providedOpts","url","newOptions","merge","RequestOptions","headers","body","withCredentials","responseType","_createDefaultCookieXSRFStrategy","CookieXSRFStrategy","httpFactory","xhrBackend","requestOptions","Http","jsonpFactory","jsonpBackend","BrowserXhr","build","XMLHttpRequest","decorators","ctorParameters","ReadyState","ResponseType","ContentType","ResponseContentType","Headers","_headers","_normalizedNames","values","append","keys","isArray","delete","fromResponseHeaderString","headersString","line","index","name_1","trim","getAll","lcName","fn","has","from","join","mayBeSetNormalizedName","toJSON","serialized","apply","entries","__extends$1","__extends","d","b","__","constructor","p","hasOwnProperty","create","ResponseOptions","_b","status","statusText","options","BaseResponseOptions","_super","call","Default","ConnectionBackend","Connection","XSRFStrategy","isSuccess","QueryEncoder","encodeKey","k","encodeValue","queryEncoder","paramsMap","clone","appendAll","storedParam","setAll","searchParams","replaceAll","toString","paramsList","Body","_body","JSON","parse","ArrayBuffer","text","fromCharCode","stringify","arrayBuffer","blob","Blob","__extends$2","Response","responseOptions","ok","_nextRequestId","BrowserJsonp","node","src","nextRequestID","requestCallback","exposeConnection","connection","connections","removeConnection","send","cleanup","parentNode","removeChild","JSONP_ERR_NO_CALLBACK","JSONP_ERR_WRONG_METHOD","JSONPConnection","JSONPConnection_","req","_dom","baseResponseOptions","_finished","TypeError","Observable","responseObserver","readyState","Loading","_id","callback","lastIndexOf","substring","script","_script","onLoad","Cancelled","Done","responseOptions_1","_responseData","next","complete","onError","message","finished","data","JSONPBackend","arguments","JSONPBackend_","_browserJSONP","_baseResponseOptions","XSSI_PREFIX","XHRConnection","browserXHR","_xhr","open","responseText","err","setDetectedContentType","setRequestHeader","Json","Text","getBody","abort","contentType","NONE","FORM","TEXT","BLOB","_cookieName","_headerName","configureRequest","xsrfToken","__platform_browser_private__","getDOM","getCookie","XHRBackend","_browserXHR","_xsrfStrategy","__extends$3","BaseRequestOptions","__extends$5","Request","prefix","detectContentType","FORM_DATA","detectContentTypeFromBody","FormData","Blob$1","ArrayBuffer$1","ARRAY_BUFFER","noop","__extends$4","_backend","_defaultOptions","responseObservable","post","put","patch","head","defaultOptions","args","provide","useFactory","deps","useClass"],"mappings":"AAAAA,cAAc,IAERC,IACA,SAASC,EAAQC,EAASC,GAE/B,YCLD,IAAAC,GAAAD,EAA0B,IAC1BE,EAAAF,EAAiC,KA6BjCG,EAAA,WAgBE,QAAAA,cAAoBC,GAAAC,KAAAD,UAfpBC,KAAAC,KAAO,eACPD,KAAAE,aAAoB,GACpBF,KAAAG,aAAoB,GACpBH,KAAAI,aACAJ,KAAAK,OAAgB,IAAK,MACrBL,KAAAM,SAAkBC,GAAI,EAAGC,SAAUC,MAAO,SACvCF,GAAI,EAAGC,SAAUC,MAAO,UACxBF,GAAI,EAAGC,SAAUC,MAAO,UACxBF,GAAI,EAAGC,SAAUC,MAAO,QACxBF,GAAI,EAAGC,SAAUC,MAAO,UACxBF,GAAI,EAAGC,SAAUC,MAAO,OACxBF,GAAI,EAAGC,SAAUC,MAAO,QAE3BT,KAAAU,SAAgBC,YAAe,OAAQC,aAAgB,UAAW,UAepE,MAXEd,cAAAe,UAAAC,SAAA,SAASC,GACPf,KAAKE,aAAea,GAGtBjB,aAAAe,UAAAG,oBAAA,SAAoBC,GAClBjB,KAAKG,aAAec,GAGtBnB,aAAAe,UAAAK,OAAA,SAAQC,GAAR,GAAAC,GAAApB,IACEA,MAAKD,QAAQmB,OAAOC,GAAME,UAAU,SAAAC,GAAK,MAAAF,GAAKhB,UAAYkB,GAAG,SAAAC,GAAS,MAAAC,SAAQC,IAAIF,MArDtFzB,aAAA4B,YAAC9B,EAAA+B,WACCC,SAAU,SACVC,SAAU,0uBAsBVC,WAAajC,EAAAkC,oBDcNC,WAAW,qBAAsBnC,EAAoBkC,oBACtDjC,gBCbKJ,GAAAI,aAAYA,GDqBnBmC,IACA,SAASxC,EAAQC,EAASC,GAE/B,YEtDD,IAAAC,GAAAD,EAA8B,IAC9BuC,EAAAvC,EAA8B,IAC9BwC,EAAAxC,EAA4B,IAC5ByC,EAAAzC,EAAyC,IAEzC0C,EAAA1C,EAA8B,KAC9B2C,EAAA3C,EAAmC,KAQnC4C,EAAA,mBAAAA,cAAyB,MANzBA,WAAAb,YAAC9B,EAAA4C,UACCC,SAAgBP,EAAAQ,cAAeJ,EAAAK,mBAAmBC,UAAWT,EAAAU,YAC3DT,EAAAU,WAAYV,EAAAW,aACdC,cAAgBX,EAAAvC,cAChBmD,WAAgBZ,EAAAvC,gBF2DTkC,WAAW,yBACZO,aE1DK7C,GAAA6C,UAASA,GFkEhBW,IACA,SAASzD,EAAQC,EAASC,GAE/B,YGhFD,IAAAC,GAAAD,EAiBO,IAEPwD,EAAAxD,EAA6B,IAC7BwC,EAAAxC,EAA4B,IAwD5ByD,EAAA,WAeE,QAAAA,uBAAYC,GAZFrD,KAAAsD,YAAiC,GAAI1D,GAAA2D,aACrCvD,KAAAwD,kBAAuC,GAAI5D,GAAA2D,aAYnDvD,KAAKyD,YAAcJ,EAAWK,cAC9B1D,KAAK2D,cAAgB,EACrB3D,KAAK4D,kBAAmB,EACxB5D,KAAK6D,MAAQ,GAuHjB,MApHET,uBAAAvC,UAAAiD,SAAA,WACE9D,KAAKW,YAAc,eACnBX,KAAK+D,aAAkC/D,KAAKyD,YAAYO,cAAc,SAElEhE,KAAKiE,OAAOjE,KAAKkE,UACflE,KAAKiE,OAAOjE,KAAKkE,OAAOvD,eAC1BX,KAAKW,YAAcX,KAAKkE,OAAOvD,aAE7BX,KAAKiE,OAAOjE,KAAKkE,OAAOtD,eAC1BZ,KAAKY,YAAcZ,KAAKkE,OAAOtD,cAGnCZ,KAAKmE,YAAYnE,KAAK6D,OACtB7D,KAAK+D,aAAaK,SAGpBhB,sBAAAvC,UAAAwD,YAAA,WACErE,KAAKmE,YAAYnE,KAAK6D,QAGxBT,sBAAAvC,UAAAyD,UAAA,SAAUC,GACR,GAAIC,GAAQxE,KAAKyE,WAAWC,MAC5B,QAAQH,EAAMI,SACZ,IAAK,IACH3E,KAAK4D,kBAAmB,CACxB,MACF,KAAK,IACH5D,KAAK2D,eAAiBa,EAAQxE,KAAK2D,cAAgB,GAAKa,CACxD,MACF,KAAK,IACHxE,KAAK2D,eAAiBa,EAAQxE,KAAK2D,cAAgB,GAAKa,CACxD,MACF,KAAK,IACCxE,KAAKyE,WAAWC,OAAS,GAC3B1E,KAAKc,SAASd,KAAK2D,eAErBY,EAAMK,gBACN,MACF,SACE5E,KAAK6D,MAAQU,EAAMM,OAAOhB,MAC1B7D,KAAKwD,kBAAkBsB,KAAK9E,KAAK6D,SAKvCT,sBAAAvC,UAAAC,SAAA,SAASiE,GACP/E,KAAK4D,kBAAmB,EACxB5D,KAAK6D,MAAQ7D,KAAKgF,gBAAgBD,GAClC/E,KAAKsD,YAAYwB,KAAK9E,KAAKyE,WAAWM,KAGxC3B,sBAAAvC,UAAAsD,YAAA,SAAYjD,GACV,GAAI+D,GAAQjF,KAAKY,YACbsE,EAAalF,KAAKkF,UAClBlF,MAAKK,QACPL,KAAKyE,WAAazE,KAAKK,MAAM8E,OAC3B,SAAUpE,GACR,MAAOmE,GAAWnE,EAAMkE,EAAO/D,KAEnClB,KAAKoF,gBAIDhC,sBAAAvC,UAAAwE,cAAR,SAAsBC,EAAaC,GACjC,GAAsB,gBAAXD,GACT,MAAOA,EAET,IAAIC,YAAgBC,OAAO,CACzB,GAAIC,GAAcH,CASlB,OARAC,GAAKG,QAAQ,SAACC,GAGVF,EAFa,OAAXA,GAA8BG,SAAXH,GACE,OAApBA,EAAOE,IAAyCC,SAApBH,EAAOE,GAC7BF,EAAOE,GAEP,KAGNF,EAEP,MAAOH,GAAOC,IAAS,IAInBnC,sBAAAvC,UAAAoD,OAAR,SAAeqB,GACb,MAAkB,QAAXA,GAA8BM,SAAXN,GAGpBlC,sBAAAvC,UAAAuE,YAAR,WACE,GAAIH,GAAQjF,KAAKY,YACbyE,EAAgBrF,KAAKqF,aACzBrF,MAAKgF,gBAAkBhF,KAAKyE,WAAWoB,IAAI,SAACvE,GAAW,MAAA+D,GAAc/D,EAAG2D,MAGlE7B,sBAAAvC,UAAAqE,WAAR,SAAmBnE,EAAWwE,EAAWrE,GACvC,GAAc,OAAXA,GAA8B0E,SAAX1E,GAA0C,IAAlBA,EAAOwD,OACnD,OAAO,CAET,IAAIoB,EAgBJ,OAfoB,gBAAT/E,GACT+E,EAAS/E,EACAwE,YAAgBC,QACzBM,EAAS/E,EACTwE,EAAKG,QAAQ,SAACC,GAGVG,EAFa,OAAXA,GAA8BF,SAAXE,GACE,OAApBA,EAAOH,IAAyCC,SAApBE,EAAOH,GAC7BG,EAAOH,GAEP,MAIbG,EAAS/E,EAAKwE,IAAS,GAElBO,EAAOC,cAAcC,QAAQ9E,EAAO6E,gBAAkB,GAtI/DrE,YAAC9B,EAAAqG,QHmIMjE,WAAW,cAAewD,QAC3BpC,sBAAsBvC,UAAW,QAAS,QGnIhDa,YAAC9B,EAAAqG,QHsIMjE,WAAW,cAAekE,SAC3B9C,sBAAsBvC,UAAW,SAAU,QGtIjDa,YAAC9B,EAAAuG,SHyIMnE,WAAW,cAAepC,EAAO2D,eAClCH,sBAAsBvC,UAAW,cAAe,QGzItDa,YAAC9B,EAAAuG,SH4IMnE,WAAW,cAAepC,EAAO2D,eAClCH,sBAAsBvC,UAAW,oBAAqB,QGvM9DuC,sBAAA1B,YAAC9B,EAAA+B,WACCC,SAAU,yBACVC,SAAU,yjBAiBVuE,QACE,ivBH4LKpE,WAAW,qBAAsBpC,EAAOyG,cACzCjD,yBG3JK1D,GAAA0D,sBAAqBA,CA+IlC,IAAAkD,GAAA,WAcE,QAAAA,uBAAoBC,EACXC,GAfX,GAAApF,GAAApB,IAcsBA,MAAAuG,WACXvG,KAAAwG,mBAXCxG,KAAAyG,cAAgB,GAAI7G,GAAA2D,aACpBvD,KAAAwD,kBAAoB,GAAI5D,GAAA2D,aACxBvD,KAAAsD,YAAc,GAAI1D,GAAA2D,aAwC5BvD,KAAA0G,iBAAmB,SAACnC,GACbnD,EAAKuF,eAGLpC,GAAwB,UAAfA,EAAMqC,OAClBxF,EAAKuF,aAAaE,UAClBzF,EAAKuF,aAAef,QAElBxE,EAAK2C,aAAuB,SAAI,IAClC3C,EAAK2C,aAAuB,SAAI3C,EAAK0F,YAIzC9G,KAAA+G,eAAiB,SAAC9F,GAChBG,EAAK2C,aAAaF,MAAQ5C,EACtBA,IAAQG,EAAK4F,SACf5F,EAAKqF,cAAc3B,KAAK7D,EAE1B,IAAIgG,GAAY7F,EAAKuF,aAAaO,QAClCD,GAAU9C,YAAYlD,GACtBG,EAAKoC,kBAAkBsB,KAAK7D,IAG9BjB,KAAAc,SAAW,SAACC,GACV,GAAIkG,GAAY7F,EAAKuF,aAAaO,SAC9BjG,EAAMgG,EAAUpD,KAChB5C,KAAQG,EAAK4F,SACf5F,EAAKqF,cAAc3B,KAAK7D,GAE1BG,EAAKkC,YAAYwB,KAAK/D,GAClBK,EAAK2C,eACP3C,EAAK2C,aAAaF,MAAQ,GAAK5C,GAEjCG,EAAKsF,oBA/DL1G,KAAKyD,YAAczD,KAAKwG,iBAAiBb,QAAQjC,cAwGrD,MArGE4C,uBAAAzF,UAAAiD,SAAA,WACE9D,KAAKmH,aAGPb,sBAAAzF,UAAAuG,YAAA,WACMpH,KAAK2G,eACP3G,KAAK2G,aAAaO,SAAS5D,YAAY+D,cACvCrH,KAAK2G,aAAaO,SAAS1D,kBAAkB6D,eAE/CC,SAASC,oBAAoB,QAASvH,KAAK0G,mBAG7CJ,sBAAAzF,UAAAwD,YAAA,SAAYmD,GACV,GAAGA,EAAe,OAAKxH,KAAK2G,aAAc,CACxC,GAAIM,GAAYjH,KAAK2G,aAAaO,QAClCD,GAAU5G,MAAQmH,EAAe,MAAEC,aACnCR,EAAU9C,YAAY8C,EAAUpD,SAMpCyC,sBAAAzF,UAAA6G,iBAAA,WACE1H,KAAK0G,mBACL1G,KAAK2H,sBAuCCrB,sBAAAzF,UAAAsG,UAAR,WACE,GAAIxB,GAAU2B,SAASM,cAAc,MACrCjC,GAAQkC,MAAMC,QAAU,eACxBnC,EAAQkC,MAAME,SAAW,WACzB/H,KAAKyD,YAAYuE,cAAcC,aAAatC,EAAS3F,KAAKyD,YAAYyE,aACtEvC,EAAQwC,YAAYnI,KAAKyD,aACzB6D,SAASc,iBAAiB,QAASpI,KAAK0G,mBAGlCJ,sBAAAzF,UAAA8G,mBAAR,WACE,GAAIU,GAAUrI,KAAKuG,SAAS+B,wBAAwBlF,EACpDpD,MAAK2G,aAAe3G,KAAKwG,iBAAiB+B,gBAAgBF,EAC1D,IAAIpB,GAAYjH,KAAK2G,aAAaO,QAelC,IAdAD,EAAU/C,OAASlE,KAAKkE,OACxB+C,EAAU5G,MAAQL,KAAKK,MACvB4G,EAAU3D,YAAYjC,UAAUrB,KAAKc,UACrCmG,EAAUzD,kBAAkBnC,UAAUrB,KAAK+G,gBAC3C/G,KAAKwI,oBAAsBxI,KAAK2G,aAAa8B,SAAS/E,cACtD1D,KAAKwI,oBAAoBX,MAAMC,QAAU,OACzC9H,KAAK+D,aAAiC/D,KAAKyD,YACV,UAA7BzD,KAAKyD,YAAYiF,SAAuB1I,KAAKwI,sBAC/CxI,KAAK+D,aAAiC/D,KAAKyD,YAAYO,cAAc,SACrEhE,KAAK+D,aAAaiE,cAAcC,aAAajI,KAAKwI,oBAAqBxI,KAAK+D,aAAamE,cAE3FjB,EAAUpD,MAAQ7D,KAAK+D,aAAaF,MACpC7D,KAAK8G,SAAW9G,KAAK+D,aAAuB,SAC5C/D,KAAK+D,aAAuB,cACxB/D,KAAK2G,aAAc,CACrB,GAAIgC,GAAO3I,KAAKyD,YAAYmF,wBACxBf,EAAQ7H,KAAKwI,oBAAoBX,KACrCA,GAAMgB,MAAQF,EAAKE,MAAQ,KAC3BhB,EAAME,SAAW,WACjBF,EAAMiB,OAAS,IACfjB,EAAMkB,IAAM,IACZlB,EAAMmB,KAAO,IACbnB,EAAMC,QAAU,iBApHpBpG,YAAC9B,EAAAqG,QHsHMjE,WAAW,cAAekE,SAC3BI,sBAAsBzF,UAAW,SAAU,QGtHjDa,YAAC9B,EAAAqG,QHyHMjE,WAAW,cAAekE,SAC3BI,sBAAsBzF,UAAW,QAAS,QGzHhDa,YAAC9B,EAAAqG,QH4HMjE,WAAW,cAAeiH,SAC3B3C,sBAAsBzF,UAAW,UAAW,QG5HlDa,YAAC9B,EAAAuG,SH+HMnE,WAAW,cAAekE,SAC3BI,sBAAsBzF,UAAW,gBAAiB,QG/HxDa,YAAC9B,EAAAuG,SHkIMnE,WAAW,cAAekE,SAC3BI,sBAAsBzF,UAAW,oBAAqB,QGlI5Da,YAAC9B,EAAAuG,SHqIMnE,WAAW,cAAekE,SAC3BI,sBAAsBzF,UAAW,cAAe,QGrGtDa,YAAC9B,EAAAsJ,aAAa,SACbtJ,EAAAsJ,aAAa,SHwGPlH,WAAW,cAAemH,UAC1BnH,WAAW,wBACXA,WAAW,oBAAqB,SACjCsE,sBAAsBzF,UAAW,mBAAoB,MGtJ7DyF,sBAAA5E,YAAC9B,EAAAwJ,WACCxH,SAAU,mBH0JHI,WAAW,qBAAsBpC,EAAOyJ,yBAA0BzJ,EAAO0J,oBAC1EhD,yBGzJK5G,GAAA4G,sBAAqBA,CAiIlC,IAAA3D,GAAA,mBAAAA,uBAMA,MALSA,oBAAAC,QAAP,WACE,OACE2G,SAAU5G,qBAVhBA,mBAAAjB,YAAC9B,EAAA4C,UACCC,SAAWU,EAAAqG,aAAcrH,EAAAU,aACzBG,cAAgBI,EAAuBkD,GACvC5G,SAAY0D,EAAuBkD,GACnCmD,iBAAmBrG,KH8CZpB,WAAW,yBACZW,sBG5CKjD,GAAAiD,mBAAkBA,GHoDzB+G,EACA,SAASjK,EAAQC,EAASC,GAE/B,YItZD,IAAAgK,GAAAhK,EAAuC,IAEvCiK,EAAAjK,EAA0B,IAE1BgK,GAAAE,yBAAyBC,gBAAgBF,EAAArH,YJ0ZnCwH,IACA,SAAStK,EAAQC,EAASC,GAE/B,YKjaD,IAAAC,GAAAD,EAA2B,IAC3ByC,EAAAzC,EAAuC,GACvCA,GAAO,GAGP,IAAAoC,GAAA,WACE,QAAAA,kBAAoBiI,GAAAhK,KAAAgK,QAiBtB,MAfEjI,kBAAAlB,UAAAK,OAAA,SAAQC,GAEN,GAAI8I,GAAU,qCAEVC,EAAS,GAAI9H,GAAA+H,eAOjB,OANAD,GAAOE,IAAI,SAAUjJ,GACrB+I,EAAOE,IAAI,SAAU,cACrBF,EAAOE,IAAI,SAAU,QACrBF,EAAOE,IAAI,WAAY,kBAGhBpK,KAAKgK,MACAK,IAAIJ,GAAW/I,OAAQgJ,IACvBrE,IAAI,SAAAyE,GAAY,MAAWA,GAASC,OAAO,MAjB3DxI,iBAAAL,YAAC9B,EAAA4K,aLmbQxI,WAAW,qBAAsBI,EAAOqI,SACzC1I,oBKnbKrC,GAAAqC,iBAAgBA,GLgcvB2I,GACA,SAASjL,EAAQC,EAASC,IMjchC,SAAAgL,EAAAtC,GACAA,EAAA3I,EAAAC,EAAA,IAAAA,EAAA,IAAAA,EAAA,MAGCK,KAAA,SAAAN,EAAAkL,EAAAC,EAAAC,GAAkF,YAicnF,SAAAC,qBAAAC,GACA,mBAAAA,GACA,MAAAA,EACA,QAAAA,EAAAC,eACA,UACA,MAAAvL,GAAAwL,cAAAC,GACA,YACA,MAAAzL,GAAAwL,cAAAE,IACA,WACA,MAAA1L,GAAAwL,cAAAG,GACA,cACA,MAAA3L,GAAAwL,cAAAI,MACA,eACA,MAAA5L,GAAAwL,cAAAK,OACA,YACA,MAAA7L,GAAAwL,cAAAM,IACA,aACA,MAAA9L,GAAAwL,cAAAO,MAEA,SAAAC,OAAA,uCAAAV,EAAA,uBAGA,QAAAW,gBAAAC,GACA,qBAAAA,GACAA,EAAAC,YAEA,mBAAAC,KAAAF,EAAAG,yBACAH,EAAAI,kBAAA,iBADA,OAKA,QAAAC,qBAAAC,GAEA,OADAC,GAAA,GAAAC,aAAAF,EAAAxH,QACA2H,EAAA,EAAAC,EAAAJ,EAAAxH,OAA8C2H,EAAAC,EAAYD,IAC1DF,EAAAE,GAAAH,EAAAK,WAAAF,EAEA,OAAAF,GAAAK,OAUA,QAAAC,aAAAC,GACA,SAAAA,IAAmCA,EAAA,GACnC,IAAA7G,GAAA,GAAA8G,IACA,IAAAD,EAAAhI,OAAA,GACA,GAAAwF,GAAAwC,EAAAE,MAAA,IACA1C,GAAAxE,QAAA,SAAAmH,GACA,GAAAC,GAAAD,EAAA7G,QAAA,KACA+G,EAAAD,OAAAD,EAAA,KAAAA,EAAAG,MAAA,EAAAF,GAAAD,EAAAG,MAAAF,EAAA,IAAAG,EAAAF,EAAA,GAAA9L,EAAA8L,EAAA,GACAG,EAAArH,EAAAwE,IAAA4C,MACAC,GAAAC,KAAAlM,GACA4E,EAAAuE,IAAA6C,EAAAC,KAGA,MAAArH,GAYA,QAAAuH,kBAAAC,GACA,MAAAC,oBAAAD,GACAE,QAAA,aACAA,QAAA,aACAA,QAAA,aACAA,QAAA,aACAA,QAAA,aACAA,QAAA,aACAA,QAAA,aACAA,QAAA,aACAA,QAAA,aAyPA,QAAAC,wBACA,GAAAC,GAAA,gBAAAC,iBAIA,OAHA,QAAAC,IACAA,EAAAF,EAAAG,OAEAD,EA8rBA,QAAAE,aAAAC,EAAAC,GACA,MAAAD,GAAAE,iBAAAD,GAAAzD,SAEA,QAAA2D,cAAAC,EAAAC,EAAAnD,EAAAoD,GACA,GAAAC,GAAAH,CACA,OAAAC,GAEAE,EAAAC,MAAA,GAAAC,IACAvD,OAAAmD,EAAAnD,UACAoD,IAAAD,EAAAC,OACAlN,OAAAiN,EAAAjN,OACAsN,QAAAL,EAAAK,QACAC,KAAAN,EAAAM,KACAC,gBAAAP,EAAAO,gBACAC,aAAAR,EAAAQ,gBAGAN,EAAAC,MAAA,GAAAC,IAAoDvD,SAAAoD,SA4LpD,QAAAQ,oCACA,UAAAC,GAEA,QAAAC,aAAAC,EAAAC,GACA,UAAAC,GAAAF,EAAAC,GAEA,QAAAE,cAAAC,EAAAH,GACA,UAAAvE,GAAA0E,EAAAH,GAzpDA,GAAAI,GAAA,WACA,QAAAA,eAQA,MANAA,YAAAvO,UAAAwO,MAAA,WAAkD,UAAAC,iBAClDF,WAAAG,aACa3I,KAAAgE,EAAAJ,aAGb4E,WAAAI,kBACAJ,aAcA1P,GAAAwL,cACA,SAAAA,GACAA,IAAA,aACAA,IAAA,eACAA,IAAA,aACAA,IAAA,mBACAA,IAAA,qBACAA,IAAA,eACAA,IAAA,kBACKxL,EAAAwL,gBAAAxL,EAAAwL,mBAOLxL,EAAA+P,WACA,SAAAA,GACAA,IAAA,mBACAA,IAAA,eACAA,IAAA,qCACAA,IAAA,qBACAA,IAAA,eACAA,IAAA,0BACK/P,EAAA+P,aAAA/P,EAAA+P,gBAML/P,EAAAgQ,aACA,SAAAA,GACAA,IAAA,iBACAA,IAAA,eACAA,IAAA,qBACAA,IAAA,iBACAA,IAAA,oBACKhQ,EAAAgQ,eAAAhQ,EAAAgQ,iBAKL,IAAAC,IACA,SAAAA,GACAA,IAAA,eACAA,IAAA,eACAA,IAAA,eACAA,IAAA,yBACAA,IAAA,eACAA,IAAA,eACAA,IAAA,gCACKA,WAKLjQ,EAAAkQ,oBACA,SAAAA,GACAA,IAAA,eACAA,IAAA,eACAA,IAAA,6BACAA,IAAA,gBACKlQ,EAAAkQ,sBAAAlQ,EAAAkQ,wBAqCL,IAAAC,GAAA,WAEA,QAAAA,SAAArB,GACA,GAAApN,GAAApB,IAKA,IAHAA,KAAA8P,SAAA,GAAAnD,KAEA3M,KAAA+P,iBAAA,GAAApD,KACA6B,EAGA,MAAAA,aAAAqB,aACArB,GAAA9I,QAAA,SAAAsK,EAAA/P,GACA+P,EAAAtK,QAAA,SAAA7B,GAAqD,MAAAzC,GAAA6O,OAAAhQ,EAAA4D,WAIrDqC,QAAAgK,KAAA1B,GAAA9I,QAAA,SAAAzF,GACA,GAAA+P,GAAAxK,MAAA2K,QAAA3B,EAAAvO,IAAAuO,EAAAvO,IAAAuO,EAAAvO,GACAmB,GAAAgP,OAAAnQ,GACA+P,EAAAtK,QAAA,SAAA7B,GAAiD,MAAAzC,GAAA6O,OAAAhQ,EAAA4D,OA4GjD,MAtGAgM,SAAAQ,yBAAA,SAAAC,GACA,GAAA9B,GAAA,GAAAqB,QASA,OARAS,GAAA1D,MAAA,MAAAlH,QAAA,SAAA6K,GACA,GAAAC,GAAAD,EAAAvK,QAAA,IACA,IAAAwK,EAAA,GACA,GAAAC,GAAAF,EAAAvD,MAAA,EAAAwD,GACA3M,EAAA0M,EAAAvD,MAAAwD,EAAA,GAAAE,MACAlC,GAAApE,IAAAqG,EAAA5M,MAGA2K,GAKAqB,QAAAhP,UAAAoP,OAAA,SAAAhQ,EAAA4D,GACA,GAAAmM,GAAAhQ,KAAA2Q,OAAA1Q,EACA,QAAA+P,EACAhQ,KAAAoK,IAAAnK,EAAA4D,GAGAmM,EAAA7C,KAAAtJ,IAMAgM,QAAAhP,UAAAuP,OAAA,SAAAnQ,GACA,GAAA2Q,GAAA3Q,EAAA8F,aACA/F,MAAA+P,iBAAAK,OAAAQ,GACA5Q,KAAA8P,SAAAM,OAAAQ,IAEAf,QAAAhP,UAAA6E,QAAA,SAAAmL,GACA,GAAAzP,GAAApB,IACAA,MAAA8P,SAAApK,QAAA,SAAAsK,EAAAY,GAA6D,MAAAC,GAAAb,EAAA5O,EAAA2O,iBAAA1F,IAAAuG,GAAAxP,EAAA0O,aAK7DD,QAAAhP,UAAAwJ,IAAA,SAAApK,GACA,GAAA+P,GAAAhQ,KAAA2Q,OAAA1Q,EACA,eAAA+P,EACA,KAEAA,EAAAtL,OAAA,EAAAsL,EAAA,SAKAH,QAAAhP,UAAAiQ,IAAA,SAAA7Q,GAAiD,MAAAD,MAAA8P,SAAAgB,IAAA7Q,EAAA8F,gBAIjD8J,QAAAhP,UAAAqP,KAAA,WAA8C,MAAA1K,OAAAuL,KAAA/Q,KAAA+P,iBAAAC,WAI9CH,QAAAhP,UAAAuJ,IAAA,SAAAnK,EAAA4D,GACA2B,MAAA2K,QAAAtM,GACAA,EAAAa,QACA1E,KAAA8P,SAAA1F,IAAAnK,EAAA8F,eAAAlC,EAAAmN,KAAA,OAIAhR,KAAA8P,SAAA1F,IAAAnK,EAAA8F,eAAAlC,IAEA7D,KAAAiR,uBAAAhR,IAKA4P,QAAAhP,UAAAmP,OAAA,WAAgD,MAAAxK,OAAAuL,KAAA/Q,KAAA8P,SAAAE,WAKhDH,QAAAhP,UAAAqQ,OAAA,WACA,GAAA9P,GAAApB,KACAmR,IAMA,OALAnR,MAAA8P,SAAApK,QAAA,SAAAsK,EAAA/P,GACA,GAAA2M,KACAoD,GAAAtK,QAAA,SAAA2H,GAA6C,MAAAT,GAAAO,KAAAiE,MAAAxE,EAAAS,EAAAT,MAAA,QAC7CuE,EAAA/P,EAAA2O,iBAAA1F,IAAApK,IAAA2M,IAEAuE,GAKAtB,QAAAhP,UAAA8P,OAAA,SAAA1Q,GACA,MAAAD,MAAA8Q,IAAA7Q,GAAAD,KAAA8P,SAAAzF,IAAApK,EAAA8F,eAAA,MAKA8J,QAAAhP,UAAAwQ,QAAA,WAAiD,SAAA3F,OAAA,yDACjDmE,QAAAhP,UAAAoQ,uBAAA,SAAAhR,GACA,GAAA2Q,GAAA3Q,EAAA8F,aACA/F,MAAA+P,iBAAAe,IAAAF,IACA5Q,KAAA+P,iBAAA3F,IAAAwG,EAAA3Q,IAGA4P,WAUAyB,EAAAtR,WAAAuR,WAAA,SAAAC,EAAAC,GAEA,QAAAC,MAAuB1R,KAAA2R,YAAAH,EADvB,OAAAI,KAAAH,KAAAI,eAAAD,KAAAJ,EAAAI,GAAAH,EAAAG,GAEAJ,GAAA3Q,UAAA,OAAA4Q,EAAAvL,OAAA4L,OAAAL,IAAAC,GAAA7Q,UAAA4Q,EAAA5Q,UAAA,GAAA6Q,MA8BAK,EAAA,WACA,QAAAA,iBAAAhF,GACA,GAAAiF,GAAA,SAAAjF,KAAuCA,EAAA0B,EAAAuD,EAAAvD,KAAAwD,EAAAD,EAAAC,OAAAzD,EAAAwD,EAAAxD,QAAA0D,EAAAF,EAAAE,WAAAtL,EAAAoL,EAAApL,KAAAwH,EAAA4D,EAAA5D,GACvCpO,MAAAyO,KAAA,MAAAA,IAAA,KACAzO,KAAAiS,OAAA,MAAAA,IAAA,KACAjS,KAAAwO,QAAA,MAAAA,IAAA,KACAxO,KAAAkS,WAAA,MAAAA,IAAA,KACAlS,KAAA4G,KAAA,MAAAA,IAAA,KACA5G,KAAAoO,IAAA,MAAAA,IAAA,KAqCA,MAVA2D,iBAAAlR,UAAAyN,MAAA,SAAA6D,GACA,UAAAJ,kBACAtD,KAAA0D,GAAA,MAAAA,EAAA1D,KAAA0D,EAAA1D,KAAAzO,KAAAyO,KACAwD,OAAAE,GAAA,MAAAA,EAAAF,OAAAE,EAAAF,OAAAjS,KAAAiS,OACAzD,QAAA2D,GAAA,MAAAA,EAAA3D,QAAA2D,EAAA3D,QAAAxO,KAAAwO,QACA0D,WAAAC,GAAA,MAAAA,EAAAD,WAAAC,EAAAD,WAAAlS,KAAAkS,WACAtL,KAAAuL,GAAA,MAAAA,EAAAvL,KAAAuL,EAAAvL,KAAA5G,KAAA4G,KACAwH,IAAA+D,GAAA,MAAAA,EAAA/D,IAAA+D,EAAA/D,IAAApO,KAAAoO,OAGA2D,mBAgDAK,EAAA,SAAAC,GAEA,QAAAD,uBACAC,EAAAC,KAAAtS,MAA+BiS,OAAA,IAAAC,WAAA,KAAAtL,KAAAlH,EAAAgQ,aAAA6C,QAAA/D,QAAA,GAAAqB,KAO/B,MATAyB,GAAAc,oBAAAC,GAIAD,oBAAA7C,aACa3I,KAAAgE,EAAAJ,aAGb4H,oBAAA5C,kBACA4C,qBACKL,GAiBLS,EAAA,WACA,QAAAA,sBAEA,MAAAA,sBAOAC,EAAA,WACA,QAAAA,eAEA,MAAAA,eAOAC,EAAA,WACA,QAAAA,iBAEA,MAAAA,iBAwBAC,EAAA,SAAAV,GAAuC,MAAAA,IAAA,KAAAA,EAAA,KA2CvCW,EAAA,WACA,QAAAA,iBAIA,MAFAA,cAAA/R,UAAAgS,UAAA,SAAAC,GAAyD,MAAA1F,kBAAA0F,IACzDF,aAAA/R,UAAAkS,YAAA,SAAA1F,GAA2D,MAAAD,kBAAAC,IAC3DuF,gBAiDAzI,EAAA,WACA,QAAAA,iBAAAuC,EAAAsG,GACA,SAAAtG,IAAuCA,EAAA,IACvC,SAAAsG,IAA0CA,EAAA,GAAAJ,IAC1C5S,KAAA0M,YACA1M,KAAAgT,eACAhT,KAAAiT,UAAAxG,YAAAC,GAyFA,MAvFAvC,iBAAAtJ,UAAAqS,MAAA,WACA,GAAAA,GAAA,GAAA/I,iBAAA,GAAAnK,KAAAgT,aAEA,OADAE,GAAAC,UAAAnT,MACAkT,GAEA/I,gBAAAtJ,UAAAiQ,IAAA,SAAAjE,GAA0D,MAAA7M,MAAAiT,UAAAnC,IAAAjE,IAC1D1C,gBAAAtJ,UAAAwJ,IAAA,SAAAwC,GACA,GAAAuG,GAAApT,KAAAiT,UAAA5I,IAAAwC,EACA,OAAArH,OAAA2K,QAAAiD,KAAA,SAEAjJ,gBAAAtJ,UAAA8P,OAAA,SAAA9D,GAA6D,MAAA7M,MAAAiT,UAAA5I,IAAAwC,QAC7D1C,gBAAAtJ,UAAAuJ,IAAA,SAAAyC,EAAA5L,GACA,YAAAA,GAAA,OAAAA,EAEA,WADAjB,MAAAoQ,OAAAvD,EAGA,IAAAK,GAAAlN,KAAAiT,UAAA5I,IAAAwC,MACAK,GAAAxI,OAAA,EACAwI,EAAAC,KAAAlM,GACAjB,KAAAiT,UAAA7I,IAAAyC,EAAAK,IAQA/C,gBAAAtJ,UAAAwS,OAAA,SAAAC,GACA,GAAAlS,GAAApB,IACAsT,GAAAL,UAAAvN,QAAA,SAAA7B,EAAAgJ,GACA,GAAAK,GAAA9L,EAAA6R,UAAA5I,IAAAwC,MACAK,GAAAxI,OAAA,EACAwI,EAAAC,KAAAtJ,EAAA,IACAzC,EAAA6R,UAAA7I,IAAAyC,EAAAK,MAGA/C,gBAAAtJ,UAAAoP,OAAA,SAAApD,EAAA5L,GACA,YAAAA,GAAA,OAAAA,EAAA,CAEA,GAAAiM,GAAAlN,KAAAiT,UAAA5I,IAAAwC,MACAK,GAAAC,KAAAlM,GACAjB,KAAAiT,UAAA7I,IAAAyC,EAAAK,KASA/C,gBAAAtJ,UAAAsS,UAAA,SAAAG,GACA,GAAAlS,GAAApB,IACAsT,GAAAL,UAAAvN,QAAA,SAAA7B,EAAAgJ,GAEA,OADAK,GAAA9L,EAAA6R,UAAA5I,IAAAwC,OACAR,EAAA,EAA+BA,EAAAxI,EAAAa,SAAkB2H,EACjDa,EAAAC,KAAAtJ,EAAAwI,GAEAjL,GAAA6R,UAAA7I,IAAAyC,EAAAK,MAUA/C,gBAAAtJ,UAAA0S,WAAA,SAAAD,GACA,GAAAlS,GAAApB,IACAsT,GAAAL,UAAAvN,QAAA,SAAA7B,EAAAgJ,GACA,GAAAK,GAAA9L,EAAA6R,UAAA5I,IAAAwC,MACAK,GAAAxI,OAAA,CACA,QAAA2H,GAAA,EAA+BA,EAAAxI,EAAAa,SAAkB2H,EACjDa,EAAAC,KAAAtJ,EAAAwI,GAEAjL,GAAA6R,UAAA7I,IAAAyC,EAAAK,MAGA/C,gBAAAtJ,UAAA2S,SAAA,WACA,GAAApS,GAAApB,KACAyT,IAIA,OAHAzT,MAAAiT,UAAAvN,QAAA,SAAAsK,EAAA8C,GACA9C,EAAAtK,QAAA,SAAA2H,GAA6C,MAAAoG,GAAAtG,KAAA/L,EAAA4R,aAAAH,UAAAC,GAAA,IAAA1R,EAAA4R,aAAAD,YAAA1F,QAE7CoG,EAAAzC,KAAA,MAEA7G,gBAAAtJ,UAAAuP,OAAA,SAAAvD,GAA6D7M,KAAAiT,UAAA7C,OAAAvD,IAC7D1C,mBAOAuJ,EAAA,WACA,QAAAA,SAqDA,MAhDAA,MAAA7S,UAAA0J,KAAA,WACA,sBAAAvK,MAAA2T,MACAC,KAAAC,MAAA7T,KAAA2T,OAEA3T,KAAA2T,gBAAAG,aACAF,KAAAC,MAAA7T,KAAA+T,QAEA/T,KAAA2T,OAKAD,KAAA7S,UAAAkT,KAAA,WACA,MAAA/T,MAAA2T,gBAAAxJ,GACAnK,KAAA2T,MAAAH,WAEAxT,KAAA2T,gBAAAG,aACA7K,OAAA+K,aAAA5C,MAAA,QAAAhF,aAAApM,KAAA2T,QAEA,OAAA3T,KAAA2T,MACA,GAEA,gBAAA3T,MAAA2T,MACAC,KAAAK,UAAAjU,KAAA2T,MAAA,QAEA3T,KAAA2T,MAAAH,YAKAE,KAAA7S,UAAAqT,YAAA,WACA,MAAAlU,MAAA2T,gBAAAG,aACA9T,KAAA2T,MAEA1H,oBAAAjM,KAAA+T,SAKAL,KAAA7S,UAAAsT,KAAA,WACA,GAAAnU,KAAA2T,gBAAAS,MACA,MAAApU,MAAA2T,KAEA,IAAA3T,KAAA2T,gBAAAG,aACA,UAAAM,OAAApU,KAAA2T,OAEA,UAAAjI,OAAA,4DAEAgI,QAUAW,EAAArU,WAAAuR,WAAA,SAAAC,EAAAC,GAEA,QAAAC,MAAuB1R,KAAA2R,YAAAH,EADvB,OAAAI,KAAAH,KAAAI,eAAAD,KAAAJ,EAAAI,GAAAH,EAAAG,GAEAJ,GAAA3Q,UAAA,OAAA4Q,EAAAvL,OAAA4L,OAAAL,IAAAC,GAAA7Q,UAAA4Q,EAAA5Q,UAAA,GAAA6Q,MAsBA4C,EAAA,SAAAjC,GAEA,QAAAiC,UAAAC,GACAlC,EAAAC,KAAAtS,MACAA,KAAA2T,MAAAY,EAAA9F,KACAzO,KAAAiS,OAAAsC,EAAAtC,OACAjS,KAAAwU,GAAAxU,KAAAiS,QAAA,KAAAjS,KAAAiS,QAAA,IACAjS,KAAAkS,WAAAqC,EAAArC,WACAlS,KAAAwO,QAAA+F,EAAA/F,QACAxO,KAAA4G,KAAA2N,EAAA3N,KACA5G,KAAAoO,IAAAmG,EAAAnG,IAKA,MAdAiG,GAAAC,SAAAjC,GAWAiC,SAAAzT,UAAA2S,SAAA,WACA,+BAAAxT,KAAAiS,OAAA,IAAAjS,KAAAkS,WAAA,aAAAlS,KAAAoO,KAEAkG,UACKZ,GAELe,EAAA,EACA7G,EAAA,eACAD,EAAA,KASA+G,EAAA,WACA,QAAAA,iBA+BA,MA5BAA,cAAA7T,UAAAwO,MAAA,SAAAjB,GACA,GAAAuG,GAAArN,SAAAM,cAAA,SAEA,OADA+M,GAAAC,IAAAxG,EACAuG,GAEAD,aAAA7T,UAAAgU,cAAA,WAA4D,cAAAJ,KAC5DC,aAAA7T,UAAAiU,gBAAA,SAAAvU,GAAgE,MAAAqN,GAAA,IAAArN,EAAA,aAChEmU,aAAA7T,UAAAkU,iBAAA,SAAAxU,EAAAyU,GACA,GAAAC,GAAAzH,sBACAyH,GAAA1U,GAAAyU,GAEAN,aAAA7T,UAAAqU,iBAAA,SAAA3U,GACA,GAAA0U,GAAAzH,sBACAyH,GAAA1U,GAAA,MAGAmU,aAAA7T,UAAAsU,KAAA,SAAAR,GAAuDrN,SAAAmH,KAAAtG,YAAA,IAEvDuM,aAAA7T,UAAAuU,QAAA,SAAAT,GACAA,EAAAU,YACAV,EAAAU,WAAAC,YAAA,IAGAZ,aAAAnF,aACa3I,KAAAgE,EAAAJ,aAGbkK,aAAAlF,kBACAkF,gBAUAnD,EAAAvR,WAAAuR,WAAA,SAAAC,EAAAC,GAEA,QAAAC,MAAuB1R,KAAA2R,YAAAH,EADvB,OAAAI,KAAAH,KAAAI,eAAAD,KAAAJ,EAAAI,GAAAH,EAAAG,GAEAJ,GAAA3Q,UAAA,OAAA4Q,EAAAvL,OAAA4L,OAAAL,IAAAC,GAAA7Q,UAAA4Q,EAAA5Q,UAAA,GAAA6Q,MAEA6D,EAAA,iDACAC,EAAA,8CAMAC,EAAA,WACA,QAAAA,oBAEA,MAAAA,oBAEAC,EAAA,SAAArD,GAEA,QAAAqD,kBAAAC,EAAAC,EAAAC,GACA,GAAAzU,GAAApB,IAKA,IAJAqS,EAAAC,KAAAtS,MACAA,KAAA4V,OACA5V,KAAA6V,sBACA7V,KAAA8V,WAAA,EACAH,EAAA3K,SAAAtL,EAAAwL,cAAAC,IACA,SAAA4K,WAAAP,EAEAxV,MAAA+N,QAAA4H,EACA3V,KAAAsK,SAAA,GAAAO,GAAAmL,WAAA,SAAAC,GACA7U,EAAA8U,WAAAxW,EAAA+P,WAAA0G,OACA,IAAA5V,GAAAa,EAAAgV,IAAAR,EAAAf,eACAe,GAAAb,iBAAAxU,EAAAa,EAGA,IAAAiV,GAAAT,EAAAd,gBAAA1T,EAAAgV,KACAhI,EAAAuH,EAAAvH,GACAA,GAAApI,QAAA,uBACAoI,IAAAb,QAAA,uBAAA8I,EAAA,KAEAjI,EAAAkI,YAAA,qBAAAlI,EAAA1J,OAAA,kBAAAA,SACA0J,IAAAmI,UAAA,EAAAnI,EAAA1J,OAAA,kBAAAA,SAAA,IAAA2R,GAEA,IAAAG,GAAApV,EAAAqV,QAAAb,EAAAvG,MAAAjB,GACAsI,EAAA,SAAAnS,GACA,GAAAnD,EAAA8U,aAAAxW,EAAA+P,WAAAkH,UAAA,CAIA,GAFAvV,EAAA8U,WAAAxW,EAAA+P,WAAAmH,KACAhB,EAAAR,QAAAoB,IACApV,EAAA0U,UAAA,CACA,GAAAe,GAAA,GAAA9E,IAAqEtD,KAAA8G,EAAA3O,KAAAlH,EAAAgQ,aAAAhE,MAAA0C,OAKrE,OAJAyH,KACAgB,EAAAhB,EAAAvH,MAAAuI,QAEAZ,GAAA1U,MAAA,GAAA+S,GAAAuC,IAGA,GAAAtC,GAAA,GAAAxC,IAA+DtD,KAAArN,EAAA0V,cAAA1I,OAC/DhN,GAAAyU,sBACAtB,EAAAnT,EAAAyU,oBAAAvH,MAAAiG,IAEA0B,EAAAc,KAAA,GAAAzC,GAAAC,IACA0B,EAAAe,aAEAC,EAAA,SAAA1V,GACA,GAAAH,EAAA8U,aAAAxW,EAAA+P,WAAAkH,UAAA,CAEAvV,EAAA8U,WAAAxW,EAAA+P,WAAAmH,KACAhB,EAAAR,QAAAoB,EACA,IAAAjC,GAAA,GAAAxC,IAA+DtD,KAAAlN,EAAA2V,QAAAtQ,KAAAlH,EAAAgQ,aAAAhE,OAC/DmK,KACAtB,EAAAsB,EAAAvH,MAAAiG,IAEA0B,EAAA1U,MAAA,GAAA+S,GAAAC,KAKA,OAHAiC,GAAApO,iBAAA,OAAAsO,GACAF,EAAApO,iBAAA,QAAA6O,GACArB,EAAAT,KAAAqB,GACA,WACApV,EAAA8U,WAAAxW,EAAA+P,WAAAkH,UACAH,EAAAjP,oBAAA,OAAAmP,GACAF,EAAAjP,oBAAA,QAAA0P,GACA7V,EAAAwU,KAAAR,QAAAoB,MAYA,MA5EAjF,GAAAmE,iBAAArD,GAoEAqD,iBAAA7U,UAAAsW,SAAA,SAAAC,GAEApX,KAAA8V,WAAA,EACA9V,KAAA4V,KAAAV,iBAAAlV,KAAAoW,KACApW,KAAAkW,aAAAxW,EAAA+P,WAAAkH,YAEA3W,KAAA8W,cAAAM,IAEA1B,kBACKD,GAML4B,EAAA,SAAAhF,GAEA,QAAAgF,gBACAhF,EAAAjB,MAAApR,KAAAsX,WAEA,MAJA/F,GAAA8F,aAAAhF,GAIAgF,cACK7E,GACL+E,EAAA,SAAAlF,GAEA,QAAAkF,eAAAC,EAAAC,GACApF,EAAAC,KAAAtS,MACAA,KAAAwX,gBACAxX,KAAAyX,uBAaA,MAjBAlG,GAAAgG,cAAAlF,GAMAkF,cAAA1W,UAAAmN,iBAAA,SAAAD,GACA,UAAA2H,GAAA3H,EAAA/N,KAAAwX,cAAAxX,KAAAyX,uBAEAF,cAAAhI,aACa3I,KAAAgE,EAAAJ,aAGb+M,cAAA/H,iBACa5I,KAAA8N,IACA9N,KAAAmL,IAEbwF,eACKF,GAELK,EAAA,eAWAC,EAAA,WACA,QAAAA,eAAAhC,EAAAiC,EAAA/B,GACA,GAAAzU,GAAApB,IACAA,MAAA+N,QAAA4H,EACA3V,KAAAsK,SAAA,GAAAO,GAAAmL,WAAA,SAAAC,GACA,GAAA4B,GAAAD,EAAAvI,OACAwI,GAAAC,KAAApY,EAAAwL,cAAAyK,EAAA3K,QAAAC,cAAA0K,EAAAvH,KACA,MAAAuH,EAAAjH,kBACAmJ,EAAAnJ,gBAAAiH,EAAAjH,gBAGA,IAAAgI,GAAA,WAEA,GAAAzE,GAAA,OAAA4F,EAAA5F,OAAA,IAAA4F,EAAA5F,OACAxD,EAAA,IAEA,OAAAwD,IAIAxD,EAAA,mBAAAoJ,GAAAvN,SAAAuN,EAAAE,aAAAF,EAAAvN,SAEA,gBAAAmE,KACAA,IAAAlB,QAAAmK,EAAA,MAMA,IAAAzF,IACAA,EAAAxD,EAAA,MAEA,IAAAD,GAAAqB,EAAAQ,yBAAAwH,EAAA9L,yBAEAqC,EAAAzC,eAAAkM,IAAAlC,EAAAvH,IACA8D,EAAA2F,EAAA3F,YAAA,KACAqC,EAAA,GAAAxC,IAA+DtD,OAAAwD,SAAAzD,UAAA0D,aAAA9D,OAC/D,OAAAyH,IACAtB,EAAAsB,EAAAvH,MAAAiG,GAEA,IAAAjK,GAAA,GAAAgK,GAAAC,EAEA,OADAjK,GAAAkK,GAAA7B,EAAAV,GACA3H,EAAAkK,IACAyB,EAAAc,KAAAzM,OAEA2L,GAAAe,gBAGAf,GAAA1U,MAAA+I,IAGA2M,EAAA,SAAAe,GACA,GAAAzD,GAAA,GAAAxC,IACAtD,KAAAuJ,EACApR,KAAAlH,EAAAgQ,aAAAhE,MACAuG,OAAA4F,EAAA5F,OACAC,WAAA2F,EAAA3F,YAEA,OAAA2D,IACAtB,EAAAsB,EAAAvH,MAAAiG,IAEA0B,EAAA1U,MAAA,GAAA+S,GAAAC,IAOA,IALAnT,EAAA6W,uBAAAtC,EAAAkC,GACA,MAAAlC,EAAAnH,SACAmH,EAAAnH,QAAA9I,QAAA,SAAAsK,EAAA/P,GAAiE,MAAA4X,GAAAK,iBAAAjY,EAAA+P,EAAAgB,KAAA,QAGjE,MAAA2E,EAAAhH,cAAA,MAAAkJ,EAAAlJ,aACA,OAAAgH,EAAAhH,cACA,IAAAjP,GAAAkQ,oBAAAkE,YACA+D,EAAAlJ,aAAA,aACA,MACA,KAAAjP,GAAAkQ,oBAAAuI,KACAN,EAAAlJ,aAAA,MACA,MACA,KAAAjP,GAAAkQ,oBAAAwI,KACAP,EAAAlJ,aAAA,MACA,MACA,KAAAjP,GAAAkQ,oBAAAwE,KACAyD,EAAAlJ,aAAA,MACA,MACA,SACA,SAAAjD,OAAA,8CAMA,MAHAmM,GAAAzP,iBAAA,OAAAsO,GACAmB,EAAAzP,iBAAA,QAAA6O,GACAY,EAAA1C,KAAA/T,EAAA2M,QAAAsK,WACA,WACAR,EAAAtQ,oBAAA,OAAAmP,GACAmB,EAAAtQ,oBAAA,QAAA0P,GACAY,EAAAS,WA8BA,MA1BAX,eAAA9W,UAAAoX,uBAAA,SAAAtC,EAAAkC,GAEA,SAAAlC,EAAAnH,SAAA,MAAAmH,EAAAnH,QAAAnE,IAAA,gBAIA,OAAAsL,EAAA4C,aACA,IAAA5I,GAAA6I,KACA,KACA,KAAA7I,GAAAiE,KACAiE,EAAAK,iBAAA,kCACA,MACA,KAAAvI,GAAA8I,KACAZ,EAAAK,iBAAA,iEACA,MACA,KAAAvI,GAAA+I,KACAb,EAAAK,iBAAA,4BACA,MACA,KAAAvI,GAAAgJ,KACA,GAAAxE,GAAAwB,EAAAxB,MACAA,GAAAvN,MACAiR,EAAAK,iBAAA,eAAA/D,EAAAvN,QAKA+Q,iBAaA9I,EAAA,WACA,QAAAA,oBAAA+J,EAAAC,GACA,SAAAD,IAAyCA,EAAA,cACzC,SAAAC,IAAyCA,EAAA,gBACzC7Y,KAAA4Y,cACA5Y,KAAA6Y,cAQA,MANAhK,oBAAAhO,UAAAiY,iBAAA,SAAAnD,GACA,GAAAoD,GAAAjO,EAAAkO,6BAAAC,SAAAC,UAAAlZ,KAAA4Y,YACAG,IACApD,EAAAnH,QAAApE,IAAApK,KAAA6Y,YAAAE,IAGAlK,sBA4BAsK,EAAA,WACA,QAAAA,YAAAC,EAAA3B,EAAA4B,GACArZ,KAAAoZ,cACApZ,KAAAyX,uBACAzX,KAAAqZ,gBAeA,MAbAF,YAAAtY,UAAAmN,iBAAA,SAAAD,GAEA,MADA/N,MAAAqZ,cAAAP,iBAAA/K,GACA,GAAA4J,GAAA5J,EAAA/N,KAAAoZ,YAAApZ,KAAAyX,uBAEA0B,WAAA5J,aACa3I,KAAAgE,EAAAJ,aAGb2O,WAAA3J,iBACa5I,KAAAwI,IACAxI,KAAAmL,IACAnL,KAAA8L,IAEbyG,cAUAG,EAAAtZ,WAAAuR,WAAA,SAAAC,EAAAC,GAEA,QAAAC,MAAuB1R,KAAA2R,YAAAH,EADvB,OAAAI,KAAAH,KAAAI,eAAAD,KAAAJ,EAAAI,GAAAH,EAAAG,GAEAJ,GAAA3Q,UAAA,OAAA4Q,EAAAvL,OAAA4L,OAAAL,IAAAC,GAAA7Q,UAAA4Q,EAAA5Q,UAAA,GAAA6Q,MA4BAnD,EAAA,WACA,QAAAA,gBAAAxB,GACA,GAAAiF,GAAA,SAAAjF,KAAuCA,EAAA/B,EAAAgH,EAAAhH,OAAAwD,EAAAwD,EAAAxD,QAAAC,EAAAuD,EAAAvD,KAAAL,EAAA4D,EAAA5D,IAAAlN,EAAA8Q,EAAA9Q,OAAAwN,EAAAsD,EAAAtD,gBAAAC,EAAAqD,EAAArD,YACvC3O,MAAAgL,OAAA,MAAAA,EAAAD,oBAAAC,GAAA,KACAhL,KAAAwO,QAAA,MAAAA,IAAA,KACAxO,KAAAyO,KAAA,MAAAA,IAAA,KACAzO,KAAAoO,IAAA,MAAAA,IAAA,KACApO,KAAAkB,OACA,MAAAA,EAAA,gBAAAA,GAAA,GAAAiJ,GAAAjJ,KAAA,KACAlB,KAAA0O,gBAAA,MAAAA,IAAA,KACA1O,KAAA2O,aAAA,MAAAA,IAAA,KA2CA,MAhBAJ,gBAAA1N,UAAAyN,MAAA,SAAA6D,GACA,UAAA5D,iBACAvD,OAAAmH,GAAA,MAAAA,EAAAnH,OAAAmH,EAAAnH,OAAAhL,KAAAgL,OACAwD,QAAA2D,GAAA,MAAAA,EAAA3D,QAAA2D,EAAA3D,QAAAxO,KAAAwO,QACAC,KAAA0D,GAAA,MAAAA,EAAA1D,KAAA0D,EAAA1D,KAAAzO,KAAAyO,KACAL,IAAA+D,GAAA,MAAAA,EAAA/D,IAAA+D,EAAA/D,IAAApO,KAAAoO,IACAlN,OAAAiR,GAAA,MAAAA,EAAAjR,OACA,gBAAAiR,GAAAjR,OAAA,GAAAiJ,GAAAgI,EAAAjR,QACAiR,EAAAjR,OAAAgS,QACAlT,KAAAkB,OACAwN,gBAAAyD,GAAA,MAAAA,EAAAzD,gBAAAyD,EAAAzD,gBACA1O,KAAA0O,gBACAC,aAAAwD,GAAA,MAAAA,EAAAxD,aAAAwD,EAAAxD,aACA3O,KAAA2O,gBAGAJ,kBAgDAgL,EAAA,SAAAlH,GAEA,QAAAkH,sBACAlH,EAAAC,KAAAtS,MAA+BgL,OAAAtL,EAAAwL,cAAAC,IAAAqD,QAAA,GAAAqB,KAO/B,MATAyJ,GAAAC,mBAAAlH,GAIAkH,mBAAAhK,aACa3I,KAAAgE,EAAAJ,aAGb+O,mBAAA/J,kBACA+J,oBACKhL,GASLiL,EAAAxZ,WAAAuR,WAAA,SAAAC,EAAAC,GAEA,QAAAC,MAAuB1R,KAAA2R,YAAAH,EADvB,OAAAI,KAAAH,KAAAI,eAAAD,KAAAJ,EAAAI,GAAAH,EAAAG,GAEAJ,GAAA3Q,UAAA,OAAA4Q,EAAAvL,OAAA4L,OAAAL,IAAAC,GAAA7Q,UAAA4Q,EAAA5Q,UAAA,GAAA6Q,MA0CA+H,EAAA,SAAApH,GAEA,QAAAoH,SAAAzK,GACAqD,EAAAC,KAAAtS,KAEA,IAAAoO,GAAAY,EAAAZ,GAEA,IADApO,KAAAoO,IAAAY,EAAAZ,IACAY,EAAA9N,OAAA,CACA,GAAAA,GAAA8N,EAAA9N,OAAAsS,UACA,IAAAtS,EAAAwD,OAAA,GACA,GAAAgV,GAAA,GACA1Z,MAAAoO,IAAApI,QAAA,WACA0T,EAAA,KAAA1Z,KAAAoO,IAAApO,KAAAoO,IAAA1J,OAAA,WAGA1E,KAAAoO,MAAAsL,EAAAxY,GAGAlB,KAAA2T,MAAA3E,EAAAP,KACAzO,KAAAgL,OAAAD,oBAAAiE,EAAAhE,QAGAhL,KAAAwO,QAAA,GAAAqB,GAAAb,EAAAR,SACAxO,KAAAuY,YAAAvY,KAAA2Z,oBACA3Z,KAAA0O,gBAAAM,EAAAN,gBACA1O,KAAA2O,aAAAK,EAAAL,aAsEA,MA9FA6K,GAAAC,QAAApH,GA6BAoH,QAAA5Y,UAAA8Y,kBAAA,WACA,OAAA3Z,KAAAwO,QAAAnE,IAAA,iBACA,uBACA,MAAAsF,GAAAiE,IACA,yCACA,MAAAjE,GAAA8I,IACA,2BACA,MAAA9I,GAAAiK,SACA,kBACA,gBACA,MAAAjK,GAAA+I,IACA,gCACA,MAAA/I,GAAAgJ,IACA,SACA,MAAA3Y,MAAA6Z,8BAMAJ,QAAA5Y,UAAAgZ,0BAAA,WACA,aAAA7Z,KAAA2T,MACAhE,EAAA6I,KAEAxY,KAAA2T,gBAAAxJ,GACAwF,EAAA8I,KAEAzY,KAAA2T,gBAAAmG,GACAnK,EAAAiK,UAEA5Z,KAAA2T,gBAAAoG,GACApK,EAAAgJ,KAEA3Y,KAAA2T,gBAAAqG,GACArK,EAAAsK,aAEAja,KAAA2T,OAAA,gBAAA3T,MAAA2T,MACAhE,EAAAiE,KAGAjE,EAAA+I,MAOAe,QAAA5Y,UAAAwX,QAAA,WACA,OAAArY,KAAAuY,aACA,IAAA5I,GAAAiE,KACA,MAAA5T,MAAA+T,MACA,KAAApE,GAAA8I,KACA,MAAAzY,MAAA+T,MACA,KAAApE,GAAAiK,UACA,MAAA5Z,MAAA2T,KACA,KAAAhE,GAAA+I,KACA,MAAA1Y,MAAA+T,MACA,KAAApE,GAAAgJ,KACA,MAAA3Y,MAAAmU,MACA,KAAAxE,GAAAsK,aACA,MAAAja,MAAAkU,aACA,SACA,cAGAuF,SACK/F,GACLwG,EAAA,aACAzM,EAAA,gBAAAC,eAAAwM,EACAJ,EAAArM,EAAA,UAAAyM,EACAH,EAAAtM,EAAA,MAAAyM,EACAF,EAAAvM,EAAA,aAAAyM,EASAC,EAAAna,WAAAuR,WAAA,SAAAC,EAAAC,GAEA,QAAAC,MAAuB1R,KAAA2R,YAAAH,EADvB,OAAAI,KAAAH,KAAAI,eAAAD,KAAAJ,EAAAI,GAAAH,EAAAG,GAEAJ,GAAA3Q,UAAA,OAAA4Q,EAAAvL,OAAA4L,OAAAL,IAAAC,GAAA7Q,UAAA4Q,EAAA5Q,UAAA,GAAA6Q,MAiFAzC,EAAA,WACA,QAAAA,MAAAmL,EAAAC,GACAra,KAAAoa,WACApa,KAAAqa,kBAuEA,MA/DApL,MAAApO,UAAAkN,QAAA,SAAAK,EAAA+D,GACA,GAAAmI,EACA,oBAAAlM,GACAkM,EAAAzM,YAAA7N,KAAAoa,SAAA,GAAAX,GAAAxL,aAAAjO,KAAAqa,gBAAAlI,EAAAzS,EAAAwL,cAAAC,IAAAiD,SAEA,MAAAA,YAAAqL,IAIA,SAAA/N,OAAA,2DAHA4O,GAAAzM,YAAA7N,KAAAoa,SAAAhM,GAKA,MAAAkM,IAKArL,KAAApO,UAAAwJ,IAAA,SAAA+D,EAAA+D,GACA,MAAAnS,MAAA+N,QAAA,GAAA0L,GAAAxL,aAAAjO,KAAAqa,gBAAAlI,EAAAzS,EAAAwL,cAAAC,IAAAiD,MAKAa,KAAApO,UAAA0Z,KAAA,SAAAnM,EAAAK,EAAA0D,GACA,MAAAnS,MAAA+N,QAAA,GAAA0L,GAAAxL,aAAAjO,KAAAqa,gBAAA/L,MAAA,GAAAC,IAAwGE,UAAa0D,EAAAzS,EAAAwL,cAAAE,KAAAgD,MAKrHa,KAAApO,UAAA2Z,IAAA,SAAApM,EAAAK,EAAA0D,GACA,MAAAnS,MAAA+N,QAAA,GAAA0L,GAAAxL,aAAAjO,KAAAqa,gBAAA/L,MAAA,GAAAC,IAAwGE,UAAa0D,EAAAzS,EAAAwL,cAAAG,IAAA+C,MAKrHa,KAAApO,UAAAuP,OAAA,SAAAhC,EAAA+D,GACA,MAAAnS,MAAA+N,QAAA,GAAA0L,GAAAxL,aAAAjO,KAAAqa,gBAAAlI,EAAAzS,EAAAwL,cAAAI,OAAA8C,MAKAa,KAAApO,UAAA4Z,MAAA,SAAArM,EAAAK,EAAA0D,GACA,MAAAnS,MAAA+N,QAAA,GAAA0L,GAAAxL,aAAAjO,KAAAqa,gBAAA/L,MAAA,GAAAC,IAAwGE,UAAa0D,EAAAzS,EAAAwL,cAAAO,MAAA2C,MAKrHa,KAAApO,UAAA6Z,KAAA,SAAAtM,EAAA+D,GACA,MAAAnS,MAAA+N,QAAA,GAAA0L,GAAAxL,aAAAjO,KAAAqa,gBAAAlI,EAAAzS,EAAAwL,cAAAM,KAAA4C,MAKAa,KAAApO,UAAAsR,QAAA,SAAA/D,EAAA+D,GACA,MAAAnS,MAAA+N,QAAA,GAAA0L,GAAAxL,aAAAjO,KAAAqa,gBAAAlI,EAAAzS,EAAAwL,cAAAK,QAAA6C,MAEAa,KAAAM,aACa3I,KAAAgE,EAAAJ,aAGbyE,KAAAO,iBACa5I,KAAA4L,IACA5L,KAAA2H,IAEbU,QAKAxE,EAAA,SAAA4H,GAEA,QAAA5H,OAAAqD,EAAA6M,GACAtI,EAAAC,KAAAtS,KAAA8N,EAAA6M,GAyCA,MA3CAR,GAAA1P,MAAA4H,GAkBA5H,MAAA5J,UAAAkN,QAAA,SAAAK,EAAA+D,GACA,GAAAmI,EAKA,IAJA,gBAAAlM,KACAA,EACA,GAAAqL,GAAAxL,aAAAjO,KAAAqa,gBAAAlI,EAAAzS,EAAAwL,cAAAC,IAAAiD,OAEAA,YAAAqL,IAOA,SAAA/N,OAAA,2DANA,IAAA0C,EAAApD,SAAAtL,EAAAwL,cAAAC,IACA,SAAAO,OAAA,8CAOA,OALA4O,GAAAzM,YAAA7N,KAAAoa,SAAAhM,IAOA3D,MAAA8E,aACa3I,KAAAgE,EAAAJ,aAGbC,MAAA+E;AACa5I,KAAA4L,IACA5L,KAAA2H,IAEb9D,OACKwE,GAgBLnM,EAAA,WACA,QAAAA,eAkBA,MAhBAA,YAAAyM,aACa3I,KAAAgE,EAAApI,SAAAoY,OACb9Y,YAG6B+Y,QAAA5L,EAAA6L,WAAAhM,YAAAiM,MAAA5B,EAAA5K,IAC7Ba,GAC6ByL,QAAAtM,EAAAyM,SAAAzB,IACAsB,QAAA9I,EAAAiJ,SAAA5I,GAC7B+G,GAC6B0B,QAAAnI,EAAAoI,WAAAlM,uCAK7B9L,WAAA0M,kBACA1M,cAOAC,EAAA,WACA,QAAAA,gBAiBA,MAfAA,aAAAwM,aACa3I,KAAAgE,EAAApI,SAAAoY,OACb9Y,YAG6B+Y,QAAApQ,EAAAqQ,WAAA5L,aAAA6L,MAAA1D,EAAA9I,IAC7BmG,GAC6BmG,QAAAtM,EAAAyM,SAAAzB,IACAsB,QAAA9I,EAAAiJ,SAAA5I,IACAyI,QAAAxD,EAAA2D,SAAAzD,QAK7BxU,YAAAyM,kBACAzM,cAGArD,GAAA0P,aACA1P,EAAA2X,eACA3X,EAAA+V,kBACA/V,EAAAmP,qBACAnP,EAAAyZ,aACAzZ,EAAAiY,gBACAjY,EAAA6Z,qBACA7Z,EAAA6O,iBACA7O,EAAA0S,sBACA1S,EAAAqS,kBACArS,EAAAmQ,UACAnQ,EAAAuP,OACAvP,EAAA+K,QACA/K,EAAAoD,aACApD,EAAAqD,cACArD,EAAA+S,aACA/S,EAAA8S,oBACA9S,EAAAgT,eACAhT,EAAA+Z,UACA/Z,EAAA4U,WACA5U,EAAAkT,eACAlT,EAAAyK","file":"main.c72c99b2c5709eda9f86.bundle.js","sourcesContent":["webpackJsonp([2],{\n\n/***/ 297:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar core_1 = __webpack_require__(14);\n\tvar wikipedia_service_1 = __webpack_require__(300);\n\tvar AppComponent = (function () {\n\t    function AppComponent(service) {\n\t        this.service = service;\n\t        this.name = 'autocomplete';\n\t        this.selectedItem = '';\n\t        this.inputChanged = '';\n\t        this.wikiItems = [];\n\t        this.items = ['a', 'ab'];\n\t        this.items2 = [{ id: 0, payload: { label: 'Tom' } },\n\t            { id: 1, payload: { label: 'John' } },\n\t            { id: 2, payload: { label: 'Lisa' } },\n\t            { id: 3, payload: { label: 'Js' } },\n\t            { id: 4, payload: { label: 'Java' } },\n\t            { id: 5, payload: { label: 'c' } },\n\t            { id: 6, payload: { label: 'vc' } }\n\t        ];\n\t        this.config2 = { 'placeholder': 'test', 'sourceField': ['payload', 'label'] };\n\t    }\n\t    AppComponent.prototype.onSelect = function (item) {\n\t        this.selectedItem = item;\n\t    };\n\t    AppComponent.prototype.onInputChangedEvent = function (val) {\n\t        this.inputChanged = val;\n\t    };\n\t    AppComponent.prototype.search = function (term) {\n\t        var _this = this;\n\t        this.service.search(term).subscribe(function (e) { return _this.wikiItems = e; }, function (error) { return console.log(error); });\n\t    };\n\t    AppComponent = __decorate([\n\t        core_1.Component({\n\t            selector: 'my-app',\n\t            template: \"<h1>{{name}}</h1>\\n     <div><h2>selected: {{selectedItem.toString()}}</h2></div>\\n     <div><h2>inputChanged: {{inputChanged.toString()}}</h2></div>\\n     <h2>String:</h2>\\n     <div>\\n       <input autocomplete [items]=\\\"items\\\"\\n         (inputChangedEvent)=\\\"onInputChangedEvent($event)\\\"\\n         (selectEvent)=\\\"onSelect($event)\\\">\\n     </div>\\n     <h2>Objects:</h2>\\n     <div>\\n       <input autocomplete [config]=\\\"config2\\\" [items]=\\\"items2\\\"\\n       (inputChangedEvent)=\\\"onInputChangedEvent($event)\\\"\\n       (selectEvent)=\\\"onSelect($event)\\\">\\n     </div>\\n     <h2>Wiki:</h2>\\n     <div>\\n       <input autocomplete [items]=\\\"wikiItems\\\"\\n       (inputChangedEvent)=\\\"search($event)\\\"\\n       (selectEvent)=\\\"onSelect($event)\\\">\\n     </div>\\n  \",\n\t            providers: [wikipedia_service_1.WikipediaService]\n\t        }), \n\t        __metadata('design:paramtypes', [wikipedia_service_1.WikipediaService])\n\t    ], AppComponent);\n\t    return AppComponent;\n\t}());\n\texports.AppComponent = AppComponent;\n\n\n/***/ },\n\n/***/ 298:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar core_1 = __webpack_require__(14);\n\tvar platform_browser_1 = __webpack_require__(50);\n\tvar forms_1 = __webpack_require__(61);\n\tvar http_1 = __webpack_require__(85);\n\tvar app_component_1 = __webpack_require__(297);\n\tvar ng2_input_autocomplete_1 = __webpack_require__(299);\n\tvar AppModule = (function () {\n\t    function AppModule() {\n\t    }\n\t    AppModule = __decorate([\n\t        core_1.NgModule({\n\t            imports: [platform_browser_1.BrowserModule, ng2_input_autocomplete_1.AutocompleteModule.forRoot(), forms_1.FormsModule,\n\t                http_1.HttpModule, http_1.JsonpModule],\n\t            declarations: [app_component_1.AppComponent],\n\t            bootstrap: [app_component_1.AppComponent]\n\t        }), \n\t        __metadata('design:paramtypes', [])\n\t    ], AppModule);\n\t    return AppModule;\n\t}());\n\texports.AppModule = AppModule;\n\n\n/***/ },\n\n/***/ 299:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t/*\n\t  MIT LICENSE @liuy97\n\t*/\n\tvar core_1 = __webpack_require__(14);\n\tvar common_1 = __webpack_require__(60);\n\tvar forms_1 = __webpack_require__(61);\n\tvar AutocompleteComponent = (function () {\n\t    function AutocompleteComponent(elementRef) {\n\t        this.selectEvent = new core_1.EventEmitter();\n\t        this.inputChangedEvent = new core_1.EventEmitter();\n\t        this.thisElement = elementRef.nativeElement;\n\t        this.selectedIndex = 0;\n\t        this.showAutoComplete = false;\n\t        this.value = '';\n\t    }\n\t    AutocompleteComponent.prototype.ngOnInit = function () {\n\t        this.placeholder = 'autocomplete';\n\t        this.inputElement = (this.thisElement.querySelector('input'));\n\t        if (!this.isNull(this.config)) {\n\t            if (!this.isNull(this.config.placeholder)) {\n\t                this.placeholder = this.config.placeholder;\n\t            }\n\t            if (!this.isNull(this.config.sourceField)) {\n\t                this.sourceField = this.config.sourceField;\n\t            }\n\t        }\n\t        this.filterItems(this.value);\n\t        this.inputElement.focus();\n\t    };\n\t    AutocompleteComponent.prototype.ngOnChanges = function () {\n\t        this.filterItems(this.value);\n\t    };\n\t    AutocompleteComponent.prototype.enterText = function (event) {\n\t        var total = this.candidates.length;\n\t        switch (event.keyCode) {\n\t            case 27:\n\t                this.showAutoComplete = false;\n\t                break;\n\t            case 38:\n\t                this.selectedIndex = (total + this.selectedIndex - 1) % total;\n\t                break;\n\t            case 40:\n\t                this.selectedIndex = (total + this.selectedIndex + 1) % total;\n\t                break;\n\t            case 13:\n\t                if (this.candidates.length > 0) {\n\t                    this.onSelect(this.selectedIndex);\n\t                }\n\t                event.preventDefault();\n\t                break;\n\t            default:\n\t                this.value = event.target.value;\n\t                this.inputChangedEvent.emit(this.value);\n\t                break;\n\t        }\n\t    };\n\t    AutocompleteComponent.prototype.onSelect = function (idx) {\n\t        this.showAutoComplete = false;\n\t        this.value = this.candiatesLabels[idx];\n\t        this.selectEvent.emit(this.candidates[idx]);\n\t    };\n\t    AutocompleteComponent.prototype.filterItems = function (search) {\n\t        var field = this.sourceField;\n\t        var filterItem = this.filterItem;\n\t        if (this.items) {\n\t            this.candidates = this.items.filter(function (item) {\n\t                return filterItem(item, field, search);\n\t            });\n\t            this.buildLabels();\n\t        }\n\t    };\n\t    AutocompleteComponent.prototype.getFieldValue = function (object, path) {\n\t        if (typeof object === 'string') {\n\t            return object;\n\t        }\n\t        if (path instanceof Array) {\n\t            var result_1 = object;\n\t            path.forEach(function (element) {\n\t                if (result_1 !== null && result_1 !== undefined\n\t                    && result_1[element] !== null && result_1[element] !== undefined) {\n\t                    result_1 = result_1[element];\n\t                }\n\t                else {\n\t                    result_1 = '';\n\t                }\n\t            });\n\t            return result_1;\n\t        }\n\t        else {\n\t            return object[path] || '';\n\t        }\n\t    };\n\t    AutocompleteComponent.prototype.isNull = function (object) {\n\t        return object === null || object === undefined;\n\t    };\n\t    AutocompleteComponent.prototype.buildLabels = function () {\n\t        var field = this.sourceField;\n\t        var getFieldValue = this.getFieldValue;\n\t        this.candiatesLabels = this.candidates.map(function (e) { return getFieldValue(e, field); });\n\t    };\n\t    AutocompleteComponent.prototype.filterItem = function (item, path, search) {\n\t        if (search === null || search === undefined || search.length === 0) {\n\t            return true;\n\t        }\n\t        var result;\n\t        if (typeof item === 'string') {\n\t            result = item;\n\t        }\n\t        else if (path instanceof Array) {\n\t            result = item;\n\t            path.forEach(function (element) {\n\t                if (result !== null && result !== undefined\n\t                    && result[element] !== null && result[element] !== undefined) {\n\t                    result = result[element];\n\t                }\n\t                else {\n\t                    result = '';\n\t                }\n\t            });\n\t        }\n\t        else {\n\t            result = item[path] || '';\n\t        }\n\t        return result.toLowerCase().indexOf(search.toLowerCase()) >= 0;\n\t    };\n\t    __decorate([\n\t        core_1.Input(), \n\t        __metadata('design:type', Array)\n\t    ], AutocompleteComponent.prototype, \"items\", void 0);\n\t    __decorate([\n\t        core_1.Input(), \n\t        __metadata('design:type', Object)\n\t    ], AutocompleteComponent.prototype, \"config\", void 0);\n\t    __decorate([\n\t        core_1.Output(), \n\t        __metadata('design:type', core_1.EventEmitter)\n\t    ], AutocompleteComponent.prototype, \"selectEvent\", void 0);\n\t    __decorate([\n\t        core_1.Output(), \n\t        __metadata('design:type', core_1.EventEmitter)\n\t    ], AutocompleteComponent.prototype, \"inputChangedEvent\", void 0);\n\t    AutocompleteComponent = __decorate([\n\t        core_1.Component({\n\t            selector: 'ng2-input-autocomplete',\n\t            template: \"\\n  <div class=\\\"autocomplete\\\">\\n    <input type=\\\"text\\\"\\n      placeholder=\\\"{{placeholder}}\\\"\\n      (blur)=\\\"showAutoComplete = false;\\\"\\n      (focus)=\\\"showAutoComplete = true;\\\"\\n      [value]=\\\"value\\\"\\n      (keyup)=\\\"enterText($event)\\\">\\n    <ul *ngIf=\\\"showAutoComplete && candidates.length > 0\\\">\\n      <li *ngFor=\\\"let candidate of candidates; let idx = index\\\"\\n        [ngClass]=\\\"{ active: (idx === selectedIndex) }\\\"\\n        (mouseover)=\\\"selectedIndex = idx;\\\"\\n        (mousedown)=\\\"onSelect(idx)\\\">\\n        {{candiatesLabels[idx]}}\\n      </li>\\n    </ul>\\n  </div>\",\n\t            styles: [\n\t                \".autocomplete ul {\\n       position: absolute;\\n       left: 0;\\n       width: 100%;\\n       border-left: 1px solid #888;\\n       border-right: 1px solid #888;\\n       border-bottom: 1px solid #888;\\n       list-style: none;\\n       padding-left: 0px;\\n       margin-top: 2px;\\n       background-color: #fff;\\n       z-index: 100;\\n     }\\n     .autocomplete li {\\n       text-align: left;\\n       list-style: none;\\n       width: 100%;\\n       padding: 0.4em 0 0.4em 0;\\n     }\\n     .autocomplete li.active {\\n       width: 100%;\\n       background-color: #4bf;\\n     }\\n\\n     .autocomplete .highlight {\\n       background-color: #e2e2e2;\\n     }\\n     .autocomplete li.active .highlight {\\n       background: #666;\\n       color: #fff;\\n     }\"\n\t            ],\n\t        }), \n\t        __metadata('design:paramtypes', [core_1.ElementRef])\n\t    ], AutocompleteComponent);\n\t    return AutocompleteComponent;\n\t}());\n\texports.AutocompleteComponent = AutocompleteComponent;\n\tvar AutocompleteDirective = (function () {\n\t    function AutocompleteDirective(resolver, viewContainerRef) {\n\t        var _this = this;\n\t        this.resolver = resolver;\n\t        this.viewContainerRef = viewContainerRef;\n\t        this.ngModelChange = new core_1.EventEmitter();\n\t        this.inputChangedEvent = new core_1.EventEmitter();\n\t        this.selectEvent = new core_1.EventEmitter();\n\t        this.hideAutocomplete = function (event) {\n\t            if (!_this.componentRef) {\n\t                return;\n\t            }\n\t            if (!event || event.type === 'click') {\n\t                _this.componentRef.destroy();\n\t                _this.componentRef = undefined;\n\t            }\n\t            if (_this.inputElement['tabIndex'] < 0) {\n\t                _this.inputElement['tabIndex'] = _this.tabIndex;\n\t            }\n\t        };\n\t        this.onInputChanged = function (val) {\n\t            _this.inputElement.value = val;\n\t            if (val !== _this.ngModel) {\n\t                _this.ngModelChange.emit(val);\n\t            }\n\t            var component = _this.componentRef.instance;\n\t            component.filterItems(val);\n\t            _this.inputChangedEvent.emit(val);\n\t        };\n\t        this.onSelect = function (item) {\n\t            var component = _this.componentRef.instance;\n\t            var val = component.value;\n\t            if (val !== _this.ngModel) {\n\t                _this.ngModelChange.emit(val);\n\t            }\n\t            _this.selectEvent.emit(item);\n\t            if (_this.inputElement) {\n\t                _this.inputElement.value = '' + val;\n\t            }\n\t            _this.hideAutocomplete();\n\t        };\n\t        this.thisElement = this.viewContainerRef.element.nativeElement;\n\t    }\n\t    AutocompleteDirective.prototype.ngOnInit = function () {\n\t        this.createDiv();\n\t    };\n\t    AutocompleteDirective.prototype.ngOnDestroy = function () {\n\t        if (this.componentRef) {\n\t            this.componentRef.instance.selectEvent.unsubscribe();\n\t            this.componentRef.instance.inputChangedEvent.unsubscribe();\n\t        }\n\t        document.removeEventListener('click', this.hideAutocomplete);\n\t    };\n\t    AutocompleteDirective.prototype.ngOnChanges = function (changes) {\n\t        if (changes['items'] && this.componentRef) {\n\t            var component = this.componentRef.instance;\n\t            component.items = changes['items'].currentValue;\n\t            component.filterItems(component.value);\n\t        }\n\t    };\n\t    AutocompleteDirective.prototype.showAutocomplete = function () {\n\t        this.hideAutocomplete();\n\t        this.createAutocomplete();\n\t    };\n\t    AutocompleteDirective.prototype.createDiv = function () {\n\t        var element = document.createElement('div');\n\t        element.style.display = 'inline-block';\n\t        element.style.position = 'relative';\n\t        this.thisElement.parentElement.insertBefore(element, this.thisElement.nextSibling);\n\t        element.appendChild(this.thisElement);\n\t        document.addEventListener('click', this.hideAutocomplete);\n\t    };\n\t    AutocompleteDirective.prototype.createAutocomplete = function () {\n\t        var factory = this.resolver.resolveComponentFactory(AutocompleteComponent);\n\t        this.componentRef = this.viewContainerRef.createComponent(factory);\n\t        var component = this.componentRef.instance;\n\t        component.config = this.config;\n\t        component.items = this.items;\n\t        component.selectEvent.subscribe(this.onSelect);\n\t        component.inputChangedEvent.subscribe(this.onInputChanged);\n\t        this.autocompleteElement = this.componentRef.location.nativeElement;\n\t        this.autocompleteElement.style.display = 'none';\n\t        this.inputElement = this.thisElement;\n\t        if (this.thisElement.tagName !== 'INPUT' && this.autocompleteElement) {\n\t            this.inputElement = this.thisElement.querySelector('input');\n\t            this.inputElement.parentElement.insertBefore(this.autocompleteElement, this.inputElement.nextSibling);\n\t        }\n\t        component.value = this.inputElement.value;\n\t        this.tabIndex = this.inputElement['tabIndex'];\n\t        this.inputElement['tabIndex'] = -100;\n\t        if (this.componentRef) {\n\t            var rect = this.thisElement.getBoundingClientRect();\n\t            var style = this.autocompleteElement.style;\n\t            style.width = rect.width + 'px';\n\t            style.position = 'absolute';\n\t            style.zIndex = '1';\n\t            style.top = '0';\n\t            style.left = '0';\n\t            style.display = 'inline-block';\n\t        }\n\t    };\n\t    __decorate([\n\t        core_1.Input(), \n\t        __metadata('design:type', Object)\n\t    ], AutocompleteDirective.prototype, \"config\", void 0);\n\t    __decorate([\n\t        core_1.Input(), \n\t        __metadata('design:type', Object)\n\t    ], AutocompleteDirective.prototype, \"items\", void 0);\n\t    __decorate([\n\t        core_1.Input(), \n\t        __metadata('design:type', String)\n\t    ], AutocompleteDirective.prototype, \"ngModel\", void 0);\n\t    __decorate([\n\t        core_1.Output(), \n\t        __metadata('design:type', Object)\n\t    ], AutocompleteDirective.prototype, \"ngModelChange\", void 0);\n\t    __decorate([\n\t        core_1.Output(), \n\t        __metadata('design:type', Object)\n\t    ], AutocompleteDirective.prototype, \"inputChangedEvent\", void 0);\n\t    __decorate([\n\t        core_1.Output(), \n\t        __metadata('design:type', Object)\n\t    ], AutocompleteDirective.prototype, \"selectEvent\", void 0);\n\t    __decorate([\n\t        core_1.HostListener('click'),\n\t        core_1.HostListener('focus'), \n\t        __metadata('design:type', Function), \n\t        __metadata('design:paramtypes', []), \n\t        __metadata('design:returntype', void 0)\n\t    ], AutocompleteDirective.prototype, \"showAutocomplete\", null);\n\t    AutocompleteDirective = __decorate([\n\t        core_1.Directive({\n\t            selector: '[autocomplete]',\n\t        }), \n\t        __metadata('design:paramtypes', [core_1.ComponentFactoryResolver, core_1.ViewContainerRef])\n\t    ], AutocompleteDirective);\n\t    return AutocompleteDirective;\n\t}());\n\texports.AutocompleteDirective = AutocompleteDirective;\n\tvar AutocompleteModule = (function () {\n\t    function AutocompleteModule() {\n\t    }\n\t    AutocompleteModule.forRoot = function () {\n\t        return {\n\t            ngModule: AutocompleteModule\n\t        };\n\t    };\n\t    AutocompleteModule = __decorate([\n\t        core_1.NgModule({\n\t            imports: [common_1.CommonModule, forms_1.FormsModule],\n\t            declarations: [AutocompleteComponent, AutocompleteDirective],\n\t            exports: [AutocompleteComponent, AutocompleteDirective],\n\t            entryComponents: [AutocompleteComponent]\n\t        }), \n\t        __metadata('design:paramtypes', [])\n\t    ], AutocompleteModule);\n\t    return AutocompleteModule;\n\t}());\n\texports.AutocompleteModule = AutocompleteModule;\n\n\n/***/ },\n\n/***/ 0:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar platform_browser_dynamic_1 = __webpack_require__(86);\n\tvar app_module_1 = __webpack_require__(298);\n\tplatform_browser_dynamic_1.platformBrowserDynamic().bootstrapModule(app_module_1.AppModule);\n\n\n/***/ },\n\n/***/ 300:\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\tvar core_1 = __webpack_require__(14);\n\tvar http_1 = __webpack_require__(85);\n\t__webpack_require__(88);\n\tvar WikipediaService = (function () {\n\t    function WikipediaService(jsonp) {\n\t        this.jsonp = jsonp;\n\t    }\n\t    WikipediaService.prototype.search = function (term) {\n\t        var wikiUrl = 'https://en.wikipedia.org/w/api.php';\n\t        var params = new http_1.URLSearchParams();\n\t        params.set('search', term); // the user's search value\n\t        params.set('action', 'opensearch');\n\t        params.set('format', 'json');\n\t        params.set('callback', 'JSONP_CALLBACK');\n\t        // TODO: Add error handling\n\t        return this.jsonp\n\t            .get(wikiUrl, { search: params })\n\t            .map(function (response) { return response.json()[1]; });\n\t    };\n\t    WikipediaService = __decorate([\n\t        core_1.Injectable(), \n\t        __metadata('design:paramtypes', [http_1.Jsonp])\n\t    ], WikipediaService);\n\t    return WikipediaService;\n\t}());\n\texports.WikipediaService = WikipediaService;\n\t/*\n\tCopyright 2016 Google Inc. All Rights Reserved.\n\tUse of this source code is governed by an MIT-style license that\n\tcan be found in the LICENSE file at http://angular.io/license\n\t*/ \n\n\n/***/ },\n\n/***/ 85:\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * @license Angular v2.2.4\n\t * (c) 2010-2016 Google, Inc. https://angular.io/\n\t * License: MIT\n\t */\n\t(function (global, factory) {\n\t     true ? factory(exports, __webpack_require__(14), __webpack_require__(28), __webpack_require__(50)) :\n\t    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', 'rxjs/Observable', '@angular/platform-browser'], factory) :\n\t    (factory((global.ng = global.ng || {}, global.ng.http = global.ng.http || {}),global.ng.core,global.Rx,global.ng.platformBrowser));\n\t}(this, function (exports,_angular_core,rxjs_Observable,_angular_platformBrowser) { 'use strict';\n\t\n\t    /**\n\t     * A backend for http that uses the `XMLHttpRequest` browser API.\n\t     *\n\t     * Take care not to evaluate this in non-browser contexts.\n\t     *\n\t     * @experimental\n\t     */\n\t    var BrowserXhr = (function () {\n\t        function BrowserXhr() {\n\t        }\n\t        BrowserXhr.prototype.build = function () { return (new XMLHttpRequest()); };\n\t        BrowserXhr.decorators = [\n\t            { type: _angular_core.Injectable },\n\t        ];\n\t        /** @nocollapse */\n\t        BrowserXhr.ctorParameters = [];\n\t        return BrowserXhr;\n\t    }());\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    /**\n\t     * Supported http methods.\n\t     * @experimental\n\t     */\n\t    exports.RequestMethod;\n\t    (function (RequestMethod) {\n\t        RequestMethod[RequestMethod[\"Get\"] = 0] = \"Get\";\n\t        RequestMethod[RequestMethod[\"Post\"] = 1] = \"Post\";\n\t        RequestMethod[RequestMethod[\"Put\"] = 2] = \"Put\";\n\t        RequestMethod[RequestMethod[\"Delete\"] = 3] = \"Delete\";\n\t        RequestMethod[RequestMethod[\"Options\"] = 4] = \"Options\";\n\t        RequestMethod[RequestMethod[\"Head\"] = 5] = \"Head\";\n\t        RequestMethod[RequestMethod[\"Patch\"] = 6] = \"Patch\";\n\t    })(exports.RequestMethod || (exports.RequestMethod = {}));\n\t    /**\n\t     * All possible states in which a connection can be, based on\n\t     * [States](http://www.w3.org/TR/XMLHttpRequest/#states) from the `XMLHttpRequest` spec, but with an\n\t     * additional \"CANCELLED\" state.\n\t     * @experimental\n\t     */\n\t    exports.ReadyState;\n\t    (function (ReadyState) {\n\t        ReadyState[ReadyState[\"Unsent\"] = 0] = \"Unsent\";\n\t        ReadyState[ReadyState[\"Open\"] = 1] = \"Open\";\n\t        ReadyState[ReadyState[\"HeadersReceived\"] = 2] = \"HeadersReceived\";\n\t        ReadyState[ReadyState[\"Loading\"] = 3] = \"Loading\";\n\t        ReadyState[ReadyState[\"Done\"] = 4] = \"Done\";\n\t        ReadyState[ReadyState[\"Cancelled\"] = 5] = \"Cancelled\";\n\t    })(exports.ReadyState || (exports.ReadyState = {}));\n\t    /**\n\t     * Acceptable response types to be associated with a {@link Response}, based on\n\t     * [ResponseType](https://fetch.spec.whatwg.org/#responsetype) from the Fetch spec.\n\t     * @experimental\n\t     */\n\t    exports.ResponseType;\n\t    (function (ResponseType) {\n\t        ResponseType[ResponseType[\"Basic\"] = 0] = \"Basic\";\n\t        ResponseType[ResponseType[\"Cors\"] = 1] = \"Cors\";\n\t        ResponseType[ResponseType[\"Default\"] = 2] = \"Default\";\n\t        ResponseType[ResponseType[\"Error\"] = 3] = \"Error\";\n\t        ResponseType[ResponseType[\"Opaque\"] = 4] = \"Opaque\";\n\t    })(exports.ResponseType || (exports.ResponseType = {}));\n\t    /**\n\t     * Supported content type to be automatically associated with a {@link Request}.\n\t     * @experimental\n\t     */\n\t    var ContentType;\n\t    (function (ContentType) {\n\t        ContentType[ContentType[\"NONE\"] = 0] = \"NONE\";\n\t        ContentType[ContentType[\"JSON\"] = 1] = \"JSON\";\n\t        ContentType[ContentType[\"FORM\"] = 2] = \"FORM\";\n\t        ContentType[ContentType[\"FORM_DATA\"] = 3] = \"FORM_DATA\";\n\t        ContentType[ContentType[\"TEXT\"] = 4] = \"TEXT\";\n\t        ContentType[ContentType[\"BLOB\"] = 5] = \"BLOB\";\n\t        ContentType[ContentType[\"ARRAY_BUFFER\"] = 6] = \"ARRAY_BUFFER\";\n\t    })(ContentType || (ContentType = {}));\n\t    /**\n\t     * Define which buffer to use to store the response\n\t     * @experimental\n\t     */\n\t    exports.ResponseContentType;\n\t    (function (ResponseContentType) {\n\t        ResponseContentType[ResponseContentType[\"Text\"] = 0] = \"Text\";\n\t        ResponseContentType[ResponseContentType[\"Json\"] = 1] = \"Json\";\n\t        ResponseContentType[ResponseContentType[\"ArrayBuffer\"] = 2] = \"ArrayBuffer\";\n\t        ResponseContentType[ResponseContentType[\"Blob\"] = 3] = \"Blob\";\n\t    })(exports.ResponseContentType || (exports.ResponseContentType = {}));\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    /**\n\t     * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as\n\t     * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).\n\t     *\n\t     * The only known difference between this `Headers` implementation and the spec is the\n\t     * lack of an `entries` method.\n\t     *\n\t     * ### Example\n\t     *\n\t     * ```\n\t     * import {Headers} from '@angular/http';\n\t     *\n\t     * var firstHeaders = new Headers();\n\t     * firstHeaders.append('Content-Type', 'image/jpeg');\n\t     * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'\n\t     *\n\t     * // Create headers from Plain Old JavaScript Object\n\t     * var secondHeaders = new Headers({\n\t     *   'X-My-Custom-Header': 'Angular'\n\t     * });\n\t     * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'\n\t     *\n\t     * var thirdHeaders = new Headers(secondHeaders);\n\t     * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'\n\t     * ```\n\t     *\n\t     * @experimental\n\t     */\n\t    var Headers = (function () {\n\t        // TODO(vicb): any -> string|string[]\n\t        function Headers(headers) {\n\t            var _this = this;\n\t            /** @internal header names are lower case */\n\t            this._headers = new Map();\n\t            /** @internal map lower case names to actual names */\n\t            this._normalizedNames = new Map();\n\t            if (!headers) {\n\t                return;\n\t            }\n\t            if (headers instanceof Headers) {\n\t                headers.forEach(function (values, name) {\n\t                    values.forEach(function (value) { return _this.append(name, value); });\n\t                });\n\t                return;\n\t            }\n\t            Object.keys(headers).forEach(function (name) {\n\t                var values = Array.isArray(headers[name]) ? headers[name] : [headers[name]];\n\t                _this.delete(name);\n\t                values.forEach(function (value) { return _this.append(name, value); });\n\t            });\n\t        }\n\t        /**\n\t         * Returns a new Headers instance from the given DOMString of Response Headers\n\t         */\n\t        Headers.fromResponseHeaderString = function (headersString) {\n\t            var headers = new Headers();\n\t            headersString.split('\\n').forEach(function (line) {\n\t                var index = line.indexOf(':');\n\t                if (index > 0) {\n\t                    var name_1 = line.slice(0, index);\n\t                    var value = line.slice(index + 1).trim();\n\t                    headers.set(name_1, value);\n\t                }\n\t            });\n\t            return headers;\n\t        };\n\t        /**\n\t         * Appends a header to existing list of header values for a given header name.\n\t         */\n\t        Headers.prototype.append = function (name, value) {\n\t            var values = this.getAll(name);\n\t            if (values === null) {\n\t                this.set(name, value);\n\t            }\n\t            else {\n\t                values.push(value);\n\t            }\n\t        };\n\t        /**\n\t         * Deletes all header values for the given name.\n\t         */\n\t        Headers.prototype.delete = function (name) {\n\t            var lcName = name.toLowerCase();\n\t            this._normalizedNames.delete(lcName);\n\t            this._headers.delete(lcName);\n\t        };\n\t        Headers.prototype.forEach = function (fn) {\n\t            var _this = this;\n\t            this._headers.forEach(function (values, lcName) { return fn(values, _this._normalizedNames.get(lcName), _this._headers); });\n\t        };\n\t        /**\n\t         * Returns first header that matches given name.\n\t         */\n\t        Headers.prototype.get = function (name) {\n\t            var values = this.getAll(name);\n\t            if (values === null) {\n\t                return null;\n\t            }\n\t            return values.length > 0 ? values[0] : null;\n\t        };\n\t        /**\n\t         * Checks for existence of header by given name.\n\t         */\n\t        Headers.prototype.has = function (name) { return this._headers.has(name.toLowerCase()); };\n\t        /**\n\t         * Returns the names of the headers\n\t         */\n\t        Headers.prototype.keys = function () { return Array.from(this._normalizedNames.values()); };\n\t        /**\n\t         * Sets or overrides header value for given name.\n\t         */\n\t        Headers.prototype.set = function (name, value) {\n\t            if (Array.isArray(value)) {\n\t                if (value.length) {\n\t                    this._headers.set(name.toLowerCase(), [value.join(',')]);\n\t                }\n\t            }\n\t            else {\n\t                this._headers.set(name.toLowerCase(), [value]);\n\t            }\n\t            this.mayBeSetNormalizedName(name);\n\t        };\n\t        /**\n\t         * Returns values of all headers.\n\t         */\n\t        Headers.prototype.values = function () { return Array.from(this._headers.values()); };\n\t        /**\n\t         * Returns string of all headers.\n\t         */\n\t        // TODO(vicb): returns {[name: string]: string[]}\n\t        Headers.prototype.toJSON = function () {\n\t            var _this = this;\n\t            var serialized = {};\n\t            this._headers.forEach(function (values, name) {\n\t                var split = [];\n\t                values.forEach(function (v) { return split.push.apply(split, v.split(',')); });\n\t                serialized[_this._normalizedNames.get(name)] = split;\n\t            });\n\t            return serialized;\n\t        };\n\t        /**\n\t         * Returns list of header values for a given name.\n\t         */\n\t        Headers.prototype.getAll = function (name) {\n\t            return this.has(name) ? this._headers.get(name.toLowerCase()) : null;\n\t        };\n\t        /**\n\t         * This method is not implemented.\n\t         */\n\t        Headers.prototype.entries = function () { throw new Error('\"entries\" method is not implemented on Headers class'); };\n\t        Headers.prototype.mayBeSetNormalizedName = function (name) {\n\t            var lcName = name.toLowerCase();\n\t            if (!this._normalizedNames.has(lcName)) {\n\t                this._normalizedNames.set(lcName, name);\n\t            }\n\t        };\n\t        return Headers;\n\t    }());\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$1 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    /**\n\t     * Creates a response options object to be optionally provided when instantiating a\n\t     * {@link Response}.\n\t     *\n\t     * This class is based on the `ResponseInit` description in the [Fetch\n\t     * Spec](https://fetch.spec.whatwg.org/#responseinit).\n\t     *\n\t     * All values are null by default. Typical defaults can be found in the\n\t     * {@link BaseResponseOptions} class, which sub-classes `ResponseOptions`.\n\t     *\n\t     * This class may be used in tests to build {@link Response Responses} for\n\t     * mock responses (see {@link MockBackend}).\n\t     *\n\t     * ### Example ([live demo](http://plnkr.co/edit/P9Jkk8e8cz6NVzbcxEsD?p=preview))\n\t     *\n\t     * ```typescript\n\t     * import {ResponseOptions, Response} from '@angular/http';\n\t     *\n\t     * var options = new ResponseOptions({\n\t     *   body: '{\"name\":\"Jeff\"}'\n\t     * });\n\t     * var res = new Response(options);\n\t     *\n\t     * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n\t     * ```\n\t     *\n\t     * @experimental\n\t     */\n\t    var ResponseOptions = (function () {\n\t        function ResponseOptions(_a) {\n\t            var _b = _a === void 0 ? {} : _a, body = _b.body, status = _b.status, headers = _b.headers, statusText = _b.statusText, type = _b.type, url = _b.url;\n\t            this.body = body != null ? body : null;\n\t            this.status = status != null ? status : null;\n\t            this.headers = headers != null ? headers : null;\n\t            this.statusText = statusText != null ? statusText : null;\n\t            this.type = type != null ? type : null;\n\t            this.url = url != null ? url : null;\n\t        }\n\t        /**\n\t         * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n\t         * override\n\t         * existing values. This method will not change the values of the instance on which it is being\n\t         * called.\n\t         *\n\t         * This may be useful when sharing a base `ResponseOptions` object inside tests,\n\t         * where certain properties may change from test to test.\n\t         *\n\t         * ### Example ([live demo](http://plnkr.co/edit/1lXquqFfgduTFBWjNoRE?p=preview))\n\t         *\n\t         * ```typescript\n\t         * import {ResponseOptions, Response} from '@angular/http';\n\t         *\n\t         * var options = new ResponseOptions({\n\t         *   body: {name: 'Jeff'}\n\t         * });\n\t         * var res = new Response(options.merge({\n\t         *   url: 'https://google.com'\n\t         * }));\n\t         * console.log('options.url:', options.url); // null\n\t         * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n\t         * console.log('res.url:', res.url); // https://google.com\n\t         * ```\n\t         */\n\t        ResponseOptions.prototype.merge = function (options) {\n\t            return new ResponseOptions({\n\t                body: options && options.body != null ? options.body : this.body,\n\t                status: options && options.status != null ? options.status : this.status,\n\t                headers: options && options.headers != null ? options.headers : this.headers,\n\t                statusText: options && options.statusText != null ? options.statusText : this.statusText,\n\t                type: options && options.type != null ? options.type : this.type,\n\t                url: options && options.url != null ? options.url : this.url,\n\t            });\n\t        };\n\t        return ResponseOptions;\n\t    }());\n\t    /**\n\t     * Subclass of {@link ResponseOptions}, with default values.\n\t     *\n\t     * Default values:\n\t     *  * status: 200\n\t     *  * headers: empty {@link Headers} object\n\t     *\n\t     * This class could be extended and bound to the {@link ResponseOptions} class\n\t     * when configuring an {@link Injector}, in order to override the default options\n\t     * used by {@link Http} to create {@link Response Responses}.\n\t     *\n\t     * ### Example ([live demo](http://plnkr.co/edit/qv8DLT?p=preview))\n\t     *\n\t     * ```typescript\n\t     * import {provide} from '@angular/core';\n\t     * import {bootstrap} from '@angular/platform-browser/browser';\n\t     * import {HTTP_PROVIDERS, Headers, Http, BaseResponseOptions, ResponseOptions} from\n\t     * '@angular/http';\n\t     * import {App} from './myapp';\n\t     *\n\t     * class MyOptions extends BaseResponseOptions {\n\t     *   headers:Headers = new Headers({network: 'github'});\n\t     * }\n\t     *\n\t     * bootstrap(App, [HTTP_PROVIDERS, {provide: ResponseOptions, useClass: MyOptions}]);\n\t     * ```\n\t     *\n\t     * The options could also be extended when manually creating a {@link Response}\n\t     * object.\n\t     *\n\t     * ### Example ([live demo](http://plnkr.co/edit/VngosOWiaExEtbstDoix?p=preview))\n\t     *\n\t     * ```\n\t     * import {BaseResponseOptions, Response} from '@angular/http';\n\t     *\n\t     * var options = new BaseResponseOptions();\n\t     * var res = new Response(options.merge({\n\t     *   body: 'Angular',\n\t     *   headers: new Headers({framework: 'angular'})\n\t     * }));\n\t     * console.log('res.headers.get(\"framework\"):', res.headers.get('framework')); // angular\n\t     * console.log('res.text():', res.text()); // Angular;\n\t     * ```\n\t     *\n\t     * @experimental\n\t     */\n\t    var BaseResponseOptions = (function (_super) {\n\t        __extends$1(BaseResponseOptions, _super);\n\t        function BaseResponseOptions() {\n\t            _super.call(this, { status: 200, statusText: 'Ok', type: exports.ResponseType.Default, headers: new Headers() });\n\t        }\n\t        BaseResponseOptions.decorators = [\n\t            { type: _angular_core.Injectable },\n\t        ];\n\t        /** @nocollapse */\n\t        BaseResponseOptions.ctorParameters = [];\n\t        return BaseResponseOptions;\n\t    }(ResponseOptions));\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    /**\n\t     * Abstract class from which real backends are derived.\n\t     *\n\t     * The primary purpose of a `ConnectionBackend` is to create new connections to fulfill a given\n\t     * {@link Request}.\n\t     *\n\t     * @experimental\n\t     */\n\t    var ConnectionBackend = (function () {\n\t        function ConnectionBackend() {\n\t        }\n\t        return ConnectionBackend;\n\t    }());\n\t    /**\n\t     * Abstract class from which real connections are derived.\n\t     *\n\t     * @experimental\n\t     */\n\t    var Connection = (function () {\n\t        function Connection() {\n\t        }\n\t        return Connection;\n\t    }());\n\t    /**\n\t     * An XSRFStrategy configures XSRF protection (e.g. via headers) on an HTTP request.\n\t     *\n\t     * @experimental\n\t     */\n\t    var XSRFStrategy = (function () {\n\t        function XSRFStrategy() {\n\t        }\n\t        return XSRFStrategy;\n\t    }());\n\t\n\t    function normalizeMethodName(method) {\n\t        if (typeof method !== 'string')\n\t            return method;\n\t        switch (method.toUpperCase()) {\n\t            case 'GET':\n\t                return exports.RequestMethod.Get;\n\t            case 'POST':\n\t                return exports.RequestMethod.Post;\n\t            case 'PUT':\n\t                return exports.RequestMethod.Put;\n\t            case 'DELETE':\n\t                return exports.RequestMethod.Delete;\n\t            case 'OPTIONS':\n\t                return exports.RequestMethod.Options;\n\t            case 'HEAD':\n\t                return exports.RequestMethod.Head;\n\t            case 'PATCH':\n\t                return exports.RequestMethod.Patch;\n\t        }\n\t        throw new Error(\"Invalid request method. The method \\\"\" + method + \"\\\" is not supported.\");\n\t    }\n\t    var isSuccess = function (status) { return (status >= 200 && status < 300); };\n\t    function getResponseURL(xhr) {\n\t        if ('responseURL' in xhr) {\n\t            return xhr.responseURL;\n\t        }\n\t        if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n\t            return xhr.getResponseHeader('X-Request-URL');\n\t        }\n\t        return;\n\t    }\n\t    function stringToArrayBuffer(input) {\n\t        var view = new Uint16Array(input.length);\n\t        for (var i = 0, strLen = input.length; i < strLen; i++) {\n\t            view[i] = input.charCodeAt(i);\n\t        }\n\t        return view.buffer;\n\t    }\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    function paramParser(rawParams) {\n\t        if (rawParams === void 0) { rawParams = ''; }\n\t        var map = new Map();\n\t        if (rawParams.length > 0) {\n\t            var params = rawParams.split('&');\n\t            params.forEach(function (param) {\n\t                var eqIdx = param.indexOf('=');\n\t                var _a = eqIdx == -1 ? [param, ''] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)], key = _a[0], val = _a[1];\n\t                var list = map.get(key) || [];\n\t                list.push(val);\n\t                map.set(key, list);\n\t            });\n\t        }\n\t        return map;\n\t    }\n\t    /**\n\t     * @experimental\n\t     **/\n\t    var QueryEncoder = (function () {\n\t        function QueryEncoder() {\n\t        }\n\t        QueryEncoder.prototype.encodeKey = function (k) { return standardEncoding(k); };\n\t        QueryEncoder.prototype.encodeValue = function (v) { return standardEncoding(v); };\n\t        return QueryEncoder;\n\t    }());\n\t    function standardEncoding(v) {\n\t        return encodeURIComponent(v)\n\t            .replace(/%40/gi, '@')\n\t            .replace(/%3A/gi, ':')\n\t            .replace(/%24/gi, '$')\n\t            .replace(/%2C/gi, ',')\n\t            .replace(/%3B/gi, ';')\n\t            .replace(/%2B/gi, '+')\n\t            .replace(/%3D/gi, '=')\n\t            .replace(/%3F/gi, '?')\n\t            .replace(/%2F/gi, '/');\n\t    }\n\t    /**\n\t     * Map-like representation of url search parameters, based on\n\t     * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,\n\t     * with several extensions for merging URLSearchParams objects:\n\t     *   - setAll()\n\t     *   - appendAll()\n\t     *   - replaceAll()\n\t     *\n\t     * This class accepts an optional second parameter of ${@link QueryEncoder},\n\t     * which is used to serialize parameters before making a request. By default,\n\t     * `QueryEncoder` encodes keys and values of parameters using `encodeURIComponent`,\n\t     * and then un-encodes certain characters that are allowed to be part of the query\n\t     * according to IETF RFC 3986: https://tools.ietf.org/html/rfc3986.\n\t     *\n\t     * These are the characters that are not encoded: `! $ \\' ( ) * + , ; A 9 - . _ ~ ? /`\n\t     *\n\t     * If the set of allowed query characters is not acceptable for a particular backend,\n\t     * `QueryEncoder` can be subclassed and provided as the 2nd argument to URLSearchParams.\n\t     *\n\t     * ```\n\t     * import {URLSearchParams, QueryEncoder} from '@angular/http';\n\t     * class MyQueryEncoder extends QueryEncoder {\n\t     *   encodeKey(k: string): string {\n\t     *     return myEncodingFunction(k);\n\t     *   }\n\t     *\n\t     *   encodeValue(v: string): string {\n\t     *     return myEncodingFunction(v);\n\t     *   }\n\t     * }\n\t     *\n\t     * let params = new URLSearchParams('', new MyQueryEncoder());\n\t     * ```\n\t     * @experimental\n\t     */\n\t    var URLSearchParams = (function () {\n\t        function URLSearchParams(rawParams, queryEncoder) {\n\t            if (rawParams === void 0) { rawParams = ''; }\n\t            if (queryEncoder === void 0) { queryEncoder = new QueryEncoder(); }\n\t            this.rawParams = rawParams;\n\t            this.queryEncoder = queryEncoder;\n\t            this.paramsMap = paramParser(rawParams);\n\t        }\n\t        URLSearchParams.prototype.clone = function () {\n\t            var clone = new URLSearchParams('', this.queryEncoder);\n\t            clone.appendAll(this);\n\t            return clone;\n\t        };\n\t        URLSearchParams.prototype.has = function (param) { return this.paramsMap.has(param); };\n\t        URLSearchParams.prototype.get = function (param) {\n\t            var storedParam = this.paramsMap.get(param);\n\t            return Array.isArray(storedParam) ? storedParam[0] : null;\n\t        };\n\t        URLSearchParams.prototype.getAll = function (param) { return this.paramsMap.get(param) || []; };\n\t        URLSearchParams.prototype.set = function (param, val) {\n\t            if (val === void 0 || val === null) {\n\t                this.delete(param);\n\t                return;\n\t            }\n\t            var list = this.paramsMap.get(param) || [];\n\t            list.length = 0;\n\t            list.push(val);\n\t            this.paramsMap.set(param, list);\n\t        };\n\t        // A merge operation\n\t        // For each name-values pair in `searchParams`, perform `set(name, values[0])`\n\t        //\n\t        // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4], c=[8], b=[7]\"\n\t        //\n\t        // TODO(@caitp): document this better\n\t        URLSearchParams.prototype.setAll = function (searchParams) {\n\t            var _this = this;\n\t            searchParams.paramsMap.forEach(function (value, param) {\n\t                var list = _this.paramsMap.get(param) || [];\n\t                list.length = 0;\n\t                list.push(value[0]);\n\t                _this.paramsMap.set(param, list);\n\t            });\n\t        };\n\t        URLSearchParams.prototype.append = function (param, val) {\n\t            if (val === void 0 || val === null)\n\t                return;\n\t            var list = this.paramsMap.get(param) || [];\n\t            list.push(val);\n\t            this.paramsMap.set(param, list);\n\t        };\n\t        // A merge operation\n\t        // For each name-values pair in `searchParams`, perform `append(name, value)`\n\t        // for each value in `values`.\n\t        //\n\t        // E.g: \"a=[1,2], c=[8]\" + \"a=[3,4], b=[7]\" = \"a=[1,2,3,4], c=[8], b=[7]\"\n\t        //\n\t        // TODO(@caitp): document this better\n\t        URLSearchParams.prototype.appendAll = function (searchParams) {\n\t            var _this = this;\n\t            searchParams.paramsMap.forEach(function (value, param) {\n\t                var list = _this.paramsMap.get(param) || [];\n\t                for (var i = 0; i < value.length; ++i) {\n\t                    list.push(value[i]);\n\t                }\n\t                _this.paramsMap.set(param, list);\n\t            });\n\t        };\n\t        // A merge operation\n\t        // For each name-values pair in `searchParams`, perform `delete(name)`,\n\t        // followed by `set(name, values)`\n\t        //\n\t        // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4,5,6], c=[8], b=[7]\"\n\t        //\n\t        // TODO(@caitp): document this better\n\t        URLSearchParams.prototype.replaceAll = function (searchParams) {\n\t            var _this = this;\n\t            searchParams.paramsMap.forEach(function (value, param) {\n\t                var list = _this.paramsMap.get(param) || [];\n\t                list.length = 0;\n\t                for (var i = 0; i < value.length; ++i) {\n\t                    list.push(value[i]);\n\t                }\n\t                _this.paramsMap.set(param, list);\n\t            });\n\t        };\n\t        URLSearchParams.prototype.toString = function () {\n\t            var _this = this;\n\t            var paramsList = [];\n\t            this.paramsMap.forEach(function (values, k) {\n\t                values.forEach(function (v) { return paramsList.push(_this.queryEncoder.encodeKey(k) + '=' + _this.queryEncoder.encodeValue(v)); });\n\t            });\n\t            return paramsList.join('&');\n\t        };\n\t        URLSearchParams.prototype.delete = function (param) { this.paramsMap.delete(param); };\n\t        return URLSearchParams;\n\t    }());\n\t\n\t    /**\n\t     * HTTP request body used by both {@link Request} and {@link Response}\n\t     * https://fetch.spec.whatwg.org/#body\n\t     */\n\t    var Body = (function () {\n\t        function Body() {\n\t        }\n\t        /**\n\t         * Attempts to return body as parsed `JSON` object, or raises an exception.\n\t         */\n\t        Body.prototype.json = function () {\n\t            if (typeof this._body === 'string') {\n\t                return JSON.parse(this._body);\n\t            }\n\t            if (this._body instanceof ArrayBuffer) {\n\t                return JSON.parse(this.text());\n\t            }\n\t            return this._body;\n\t        };\n\t        /**\n\t         * Returns the body as a string, presuming `toString()` can be called on the response body.\n\t         */\n\t        Body.prototype.text = function () {\n\t            if (this._body instanceof URLSearchParams) {\n\t                return this._body.toString();\n\t            }\n\t            if (this._body instanceof ArrayBuffer) {\n\t                return String.fromCharCode.apply(null, new Uint16Array(this._body));\n\t            }\n\t            if (this._body === null) {\n\t                return '';\n\t            }\n\t            if (typeof this._body === 'object') {\n\t                return JSON.stringify(this._body, null, 2);\n\t            }\n\t            return this._body.toString();\n\t        };\n\t        /**\n\t         * Return the body as an ArrayBuffer\n\t         */\n\t        Body.prototype.arrayBuffer = function () {\n\t            if (this._body instanceof ArrayBuffer) {\n\t                return this._body;\n\t            }\n\t            return stringToArrayBuffer(this.text());\n\t        };\n\t        /**\n\t          * Returns the request's body as a Blob, assuming that body exists.\n\t          */\n\t        Body.prototype.blob = function () {\n\t            if (this._body instanceof Blob) {\n\t                return this._body;\n\t            }\n\t            if (this._body instanceof ArrayBuffer) {\n\t                return new Blob([this._body]);\n\t            }\n\t            throw new Error('The request body isn\\'t either a blob or an array buffer');\n\t        };\n\t        return Body;\n\t    }());\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$2 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    /**\n\t     * Creates `Response` instances from provided values.\n\t     *\n\t     * Though this object isn't\n\t     * usually instantiated by end-users, it is the primary object interacted with when it comes time to\n\t     * add data to a view.\n\t     *\n\t     * ### Example\n\t     *\n\t     * ```\n\t     * http.request('my-friends.txt').subscribe(response => this.friends = response.text());\n\t     * ```\n\t     *\n\t     * The Response's interface is inspired by the Response constructor defined in the [Fetch\n\t     * Spec](https://fetch.spec.whatwg.org/#response-class), but is considered a static value whose body\n\t     * can be accessed many times. There are other differences in the implementation, but this is the\n\t     * most significant.\n\t     *\n\t     * @experimental\n\t     */\n\t    var Response = (function (_super) {\n\t        __extends$2(Response, _super);\n\t        function Response(responseOptions) {\n\t            _super.call(this);\n\t            this._body = responseOptions.body;\n\t            this.status = responseOptions.status;\n\t            this.ok = (this.status >= 200 && this.status <= 299);\n\t            this.statusText = responseOptions.statusText;\n\t            this.headers = responseOptions.headers;\n\t            this.type = responseOptions.type;\n\t            this.url = responseOptions.url;\n\t        }\n\t        Response.prototype.toString = function () {\n\t            return \"Response with status: \" + this.status + \" \" + this.statusText + \" for URL: \" + this.url;\n\t        };\n\t        return Response;\n\t    }(Body));\n\t\n\t    var _nextRequestId = 0;\n\t    var JSONP_HOME = '__ng_jsonp__';\n\t    var _jsonpConnections = null;\n\t    function _getJsonpConnections() {\n\t        var w = typeof window == 'object' ? window : {};\n\t        if (_jsonpConnections === null) {\n\t            _jsonpConnections = w[JSONP_HOME] = {};\n\t        }\n\t        return _jsonpConnections;\n\t    }\n\t    // Make sure not to evaluate this in a non-browser environment!\n\t    var BrowserJsonp = (function () {\n\t        function BrowserJsonp() {\n\t        }\n\t        // Construct a <script> element with the specified URL\n\t        BrowserJsonp.prototype.build = function (url) {\n\t            var node = document.createElement('script');\n\t            node.src = url;\n\t            return node;\n\t        };\n\t        BrowserJsonp.prototype.nextRequestID = function () { return \"__req\" + _nextRequestId++; };\n\t        BrowserJsonp.prototype.requestCallback = function (id) { return JSONP_HOME + \".\" + id + \".finished\"; };\n\t        BrowserJsonp.prototype.exposeConnection = function (id, connection) {\n\t            var connections = _getJsonpConnections();\n\t            connections[id] = connection;\n\t        };\n\t        BrowserJsonp.prototype.removeConnection = function (id) {\n\t            var connections = _getJsonpConnections();\n\t            connections[id] = null;\n\t        };\n\t        // Attach the <script> element to the DOM\n\t        BrowserJsonp.prototype.send = function (node) { document.body.appendChild((node)); };\n\t        // Remove <script> element from the DOM\n\t        BrowserJsonp.prototype.cleanup = function (node) {\n\t            if (node.parentNode) {\n\t                node.parentNode.removeChild((node));\n\t            }\n\t        };\n\t        BrowserJsonp.decorators = [\n\t            { type: _angular_core.Injectable },\n\t        ];\n\t        /** @nocollapse */\n\t        BrowserJsonp.ctorParameters = [];\n\t        return BrowserJsonp;\n\t    }());\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    var JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n\t    var JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';\n\t    /**\n\t     * Abstract base class for an in-flight JSONP request.\n\t     *\n\t     * @experimental\n\t     */\n\t    var JSONPConnection = (function () {\n\t        function JSONPConnection() {\n\t        }\n\t        return JSONPConnection;\n\t    }());\n\t    var JSONPConnection_ = (function (_super) {\n\t        __extends(JSONPConnection_, _super);\n\t        function JSONPConnection_(req, _dom, baseResponseOptions) {\n\t            var _this = this;\n\t            _super.call(this);\n\t            this._dom = _dom;\n\t            this.baseResponseOptions = baseResponseOptions;\n\t            this._finished = false;\n\t            if (req.method !== exports.RequestMethod.Get) {\n\t                throw new TypeError(JSONP_ERR_WRONG_METHOD);\n\t            }\n\t            this.request = req;\n\t            this.response = new rxjs_Observable.Observable(function (responseObserver) {\n\t                _this.readyState = exports.ReadyState.Loading;\n\t                var id = _this._id = _dom.nextRequestID();\n\t                _dom.exposeConnection(id, _this);\n\t                // Workaround Dart\n\t                // url = url.replace(/=JSONP_CALLBACK(&|$)/, `generated method`);\n\t                var callback = _dom.requestCallback(_this._id);\n\t                var url = req.url;\n\t                if (url.indexOf('=JSONP_CALLBACK&') > -1) {\n\t                    url = url.replace('=JSONP_CALLBACK&', \"=\" + callback + \"&\");\n\t                }\n\t                else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {\n\t                    url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + (\"=\" + callback);\n\t                }\n\t                var script = _this._script = _dom.build(url);\n\t                var onLoad = function (event) {\n\t                    if (_this.readyState === exports.ReadyState.Cancelled)\n\t                        return;\n\t                    _this.readyState = exports.ReadyState.Done;\n\t                    _dom.cleanup(script);\n\t                    if (!_this._finished) {\n\t                        var responseOptions_1 = new ResponseOptions({ body: JSONP_ERR_NO_CALLBACK, type: exports.ResponseType.Error, url: url });\n\t                        if (baseResponseOptions) {\n\t                            responseOptions_1 = baseResponseOptions.merge(responseOptions_1);\n\t                        }\n\t                        responseObserver.error(new Response(responseOptions_1));\n\t                        return;\n\t                    }\n\t                    var responseOptions = new ResponseOptions({ body: _this._responseData, url: url });\n\t                    if (_this.baseResponseOptions) {\n\t                        responseOptions = _this.baseResponseOptions.merge(responseOptions);\n\t                    }\n\t                    responseObserver.next(new Response(responseOptions));\n\t                    responseObserver.complete();\n\t                };\n\t                var onError = function (error) {\n\t                    if (_this.readyState === exports.ReadyState.Cancelled)\n\t                        return;\n\t                    _this.readyState = exports.ReadyState.Done;\n\t                    _dom.cleanup(script);\n\t                    var responseOptions = new ResponseOptions({ body: error.message, type: exports.ResponseType.Error });\n\t                    if (baseResponseOptions) {\n\t                        responseOptions = baseResponseOptions.merge(responseOptions);\n\t                    }\n\t                    responseObserver.error(new Response(responseOptions));\n\t                };\n\t                script.addEventListener('load', onLoad);\n\t                script.addEventListener('error', onError);\n\t                _dom.send(script);\n\t                return function () {\n\t                    _this.readyState = exports.ReadyState.Cancelled;\n\t                    script.removeEventListener('load', onLoad);\n\t                    script.removeEventListener('error', onError);\n\t                    _this._dom.cleanup(script);\n\t                };\n\t            });\n\t        }\n\t        JSONPConnection_.prototype.finished = function (data) {\n\t            // Don't leak connections\n\t            this._finished = true;\n\t            this._dom.removeConnection(this._id);\n\t            if (this.readyState === exports.ReadyState.Cancelled)\n\t                return;\n\t            this._responseData = data;\n\t        };\n\t        return JSONPConnection_;\n\t    }(JSONPConnection));\n\t    /**\n\t     * A {@link ConnectionBackend} that uses the JSONP strategy of making requests.\n\t     *\n\t     * @experimental\n\t     */\n\t    var JSONPBackend = (function (_super) {\n\t        __extends(JSONPBackend, _super);\n\t        function JSONPBackend() {\n\t            _super.apply(this, arguments);\n\t        }\n\t        return JSONPBackend;\n\t    }(ConnectionBackend));\n\t    var JSONPBackend_ = (function (_super) {\n\t        __extends(JSONPBackend_, _super);\n\t        function JSONPBackend_(_browserJSONP, _baseResponseOptions) {\n\t            _super.call(this);\n\t            this._browserJSONP = _browserJSONP;\n\t            this._baseResponseOptions = _baseResponseOptions;\n\t        }\n\t        JSONPBackend_.prototype.createConnection = function (request) {\n\t            return new JSONPConnection_(request, this._browserJSONP, this._baseResponseOptions);\n\t        };\n\t        JSONPBackend_.decorators = [\n\t            { type: _angular_core.Injectable },\n\t        ];\n\t        /** @nocollapse */\n\t        JSONPBackend_.ctorParameters = [\n\t            { type: BrowserJsonp, },\n\t            { type: ResponseOptions, },\n\t        ];\n\t        return JSONPBackend_;\n\t    }(JSONPBackend));\n\t\n\t    var XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n\t    /**\n\t     * Creates connections using `XMLHttpRequest`. Given a fully-qualified\n\t     * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the\n\t     * request.\n\t     *\n\t     * This class would typically not be created or interacted with directly inside applications, though\n\t     * the {@link MockConnection} may be interacted with in tests.\n\t     *\n\t     * @experimental\n\t     */\n\t    var XHRConnection = (function () {\n\t        function XHRConnection(req, browserXHR, baseResponseOptions) {\n\t            var _this = this;\n\t            this.request = req;\n\t            this.response = new rxjs_Observable.Observable(function (responseObserver) {\n\t                var _xhr = browserXHR.build();\n\t                _xhr.open(exports.RequestMethod[req.method].toUpperCase(), req.url);\n\t                if (req.withCredentials != null) {\n\t                    _xhr.withCredentials = req.withCredentials;\n\t                }\n\t                // load event handler\n\t                var onLoad = function () {\n\t                    // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n\t                    var status = _xhr.status === 1223 ? 204 : _xhr.status;\n\t                    var body = null;\n\t                    // HTTP 204 means no content\n\t                    if (status !== 204) {\n\t                        // responseText is the old-school way of retrieving response (supported by IE8 & 9)\n\t                        // response/responseType properties were introduced in ResourceLoader Level2 spec\n\t                        // (supported by IE10)\n\t                        body = (typeof _xhr.response === 'undefined') ? _xhr.responseText : _xhr.response;\n\t                        // Implicitly strip a potential XSSI prefix.\n\t                        if (typeof body === 'string') {\n\t                            body = body.replace(XSSI_PREFIX, '');\n\t                        }\n\t                    }\n\t                    // fix status code when it is 0 (0 status is undocumented).\n\t                    // Occurs when accessing file resources or on Android 4.1 stock browser\n\t                    // while retrieving files from application cache.\n\t                    if (status === 0) {\n\t                        status = body ? 200 : 0;\n\t                    }\n\t                    var headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());\n\t                    // IE 9 does not provide the way to get URL of response\n\t                    var url = getResponseURL(_xhr) || req.url;\n\t                    var statusText = _xhr.statusText || 'OK';\n\t                    var responseOptions = new ResponseOptions({ body: body, status: status, headers: headers, statusText: statusText, url: url });\n\t                    if (baseResponseOptions != null) {\n\t                        responseOptions = baseResponseOptions.merge(responseOptions);\n\t                    }\n\t                    var response = new Response(responseOptions);\n\t                    response.ok = isSuccess(status);\n\t                    if (response.ok) {\n\t                        responseObserver.next(response);\n\t                        // TODO(gdi2290): defer complete if array buffer until done\n\t                        responseObserver.complete();\n\t                        return;\n\t                    }\n\t                    responseObserver.error(response);\n\t                };\n\t                // error event handler\n\t                var onError = function (err) {\n\t                    var responseOptions = new ResponseOptions({\n\t                        body: err,\n\t                        type: exports.ResponseType.Error,\n\t                        status: _xhr.status,\n\t                        statusText: _xhr.statusText,\n\t                    });\n\t                    if (baseResponseOptions != null) {\n\t                        responseOptions = baseResponseOptions.merge(responseOptions);\n\t                    }\n\t                    responseObserver.error(new Response(responseOptions));\n\t                };\n\t                _this.setDetectedContentType(req, _xhr);\n\t                if (req.headers != null) {\n\t                    req.headers.forEach(function (values, name) { return _xhr.setRequestHeader(name, values.join(',')); });\n\t                }\n\t                // Select the correct buffer type to store the response\n\t                if (req.responseType != null && _xhr.responseType != null) {\n\t                    switch (req.responseType) {\n\t                        case exports.ResponseContentType.ArrayBuffer:\n\t                            _xhr.responseType = 'arraybuffer';\n\t                            break;\n\t                        case exports.ResponseContentType.Json:\n\t                            _xhr.responseType = 'json';\n\t                            break;\n\t                        case exports.ResponseContentType.Text:\n\t                            _xhr.responseType = 'text';\n\t                            break;\n\t                        case exports.ResponseContentType.Blob:\n\t                            _xhr.responseType = 'blob';\n\t                            break;\n\t                        default:\n\t                            throw new Error('The selected responseType is not supported');\n\t                    }\n\t                }\n\t                _xhr.addEventListener('load', onLoad);\n\t                _xhr.addEventListener('error', onError);\n\t                _xhr.send(_this.request.getBody());\n\t                return function () {\n\t                    _xhr.removeEventListener('load', onLoad);\n\t                    _xhr.removeEventListener('error', onError);\n\t                    _xhr.abort();\n\t                };\n\t            });\n\t        }\n\t        XHRConnection.prototype.setDetectedContentType = function (req /** TODO Request */, _xhr /** XMLHttpRequest */) {\n\t            // Skip if a custom Content-Type header is provided\n\t            if (req.headers != null && req.headers.get('Content-Type') != null) {\n\t                return;\n\t            }\n\t            // Set the detected content type\n\t            switch (req.contentType) {\n\t                case ContentType.NONE:\n\t                    break;\n\t                case ContentType.JSON:\n\t                    _xhr.setRequestHeader('content-type', 'application/json');\n\t                    break;\n\t                case ContentType.FORM:\n\t                    _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n\t                    break;\n\t                case ContentType.TEXT:\n\t                    _xhr.setRequestHeader('content-type', 'text/plain');\n\t                    break;\n\t                case ContentType.BLOB:\n\t                    var blob = req.blob();\n\t                    if (blob.type) {\n\t                        _xhr.setRequestHeader('content-type', blob.type);\n\t                    }\n\t                    break;\n\t            }\n\t        };\n\t        return XHRConnection;\n\t    }());\n\t    /**\n\t     * `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application\n\t     * using a cookie. See {@link https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)}\n\t     * for more information on XSRF.\n\t     *\n\t     * Applications can configure custom cookie and header names by binding an instance of this class\n\t     * with different `cookieName` and `headerName` values. See the main HTTP documentation for more\n\t     * details.\n\t     *\n\t     * @experimental\n\t     */\n\t    var CookieXSRFStrategy = (function () {\n\t        function CookieXSRFStrategy(_cookieName, _headerName) {\n\t            if (_cookieName === void 0) { _cookieName = 'XSRF-TOKEN'; }\n\t            if (_headerName === void 0) { _headerName = 'X-XSRF-TOKEN'; }\n\t            this._cookieName = _cookieName;\n\t            this._headerName = _headerName;\n\t        }\n\t        CookieXSRFStrategy.prototype.configureRequest = function (req) {\n\t            var xsrfToken = _angular_platformBrowser.__platform_browser_private__.getDOM().getCookie(this._cookieName);\n\t            if (xsrfToken) {\n\t                req.headers.set(this._headerName, xsrfToken);\n\t            }\n\t        };\n\t        return CookieXSRFStrategy;\n\t    }());\n\t    /**\n\t     * Creates {@link XHRConnection} instances.\n\t     *\n\t     * This class would typically not be used by end users, but could be\n\t     * overridden if a different backend implementation should be used,\n\t     * such as in a node backend.\n\t     *\n\t     * ### Example\n\t     *\n\t     * ```\n\t     * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '@angular/http';\n\t     * @Component({\n\t     *   viewProviders: [\n\t     *     HTTP_PROVIDERS,\n\t     *     {provide: Http, useFactory: (backend, options) => {\n\t     *       return new Http(backend, options);\n\t     *     }, deps: [MyNodeBackend, BaseRequestOptions]}]\n\t     * })\n\t     * class MyComponent {\n\t     *   constructor(http:Http) {\n\t     *     http.request('people.json').subscribe(res => this.people = res.json());\n\t     *   }\n\t     * }\n\t     * ```\n\t     * @experimental\n\t     */\n\t    var XHRBackend = (function () {\n\t        function XHRBackend(_browserXHR, _baseResponseOptions, _xsrfStrategy) {\n\t            this._browserXHR = _browserXHR;\n\t            this._baseResponseOptions = _baseResponseOptions;\n\t            this._xsrfStrategy = _xsrfStrategy;\n\t        }\n\t        XHRBackend.prototype.createConnection = function (request) {\n\t            this._xsrfStrategy.configureRequest(request);\n\t            return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);\n\t        };\n\t        XHRBackend.decorators = [\n\t            { type: _angular_core.Injectable },\n\t        ];\n\t        /** @nocollapse */\n\t        XHRBackend.ctorParameters = [\n\t            { type: BrowserXhr, },\n\t            { type: ResponseOptions, },\n\t            { type: XSRFStrategy, },\n\t        ];\n\t        return XHRBackend;\n\t    }());\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$3 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    /**\n\t     * Creates a request options object to be optionally provided when instantiating a\n\t     * {@link Request}.\n\t     *\n\t     * This class is based on the `RequestInit` description in the [Fetch\n\t     * Spec](https://fetch.spec.whatwg.org/#requestinit).\n\t     *\n\t     * All values are null by default. Typical defaults can be found in the {@link BaseRequestOptions}\n\t     * class, which sub-classes `RequestOptions`.\n\t     *\n\t     * ### Example ([live demo](http://plnkr.co/edit/7Wvi3lfLq41aQPKlxB4O?p=preview))\n\t     *\n\t     * ```typescript\n\t     * import {RequestOptions, Request, RequestMethod} from '@angular/http';\n\t     *\n\t     * var options = new RequestOptions({\n\t     *   method: RequestMethod.Post,\n\t     *   url: 'https://google.com'\n\t     * });\n\t     * var req = new Request(options);\n\t     * console.log('req.method:', RequestMethod[req.method]); // Post\n\t     * console.log('options.url:', options.url); // https://google.com\n\t     * ```\n\t     *\n\t     * @experimental\n\t     */\n\t    var RequestOptions = (function () {\n\t        function RequestOptions(_a) {\n\t            var _b = _a === void 0 ? {} : _a, method = _b.method, headers = _b.headers, body = _b.body, url = _b.url, search = _b.search, withCredentials = _b.withCredentials, responseType = _b.responseType;\n\t            this.method = method != null ? normalizeMethodName(method) : null;\n\t            this.headers = headers != null ? headers : null;\n\t            this.body = body != null ? body : null;\n\t            this.url = url != null ? url : null;\n\t            this.search =\n\t                search != null ? (typeof search === 'string' ? new URLSearchParams(search) : search) : null;\n\t            this.withCredentials = withCredentials != null ? withCredentials : null;\n\t            this.responseType = responseType != null ? responseType : null;\n\t        }\n\t        /**\n\t         * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n\t         * existing values. This method will not change the values of the instance on which it is being\n\t         * called.\n\t         *\n\t         * Note that `headers` and `search` will override existing values completely if present in\n\t         * the `options` object. If these values should be merged, it should be done prior to calling\n\t         * `merge` on the `RequestOptions` instance.\n\t         *\n\t         * ### Example ([live demo](http://plnkr.co/edit/6w8XA8YTkDRcPYpdB9dk?p=preview))\n\t         *\n\t         * ```typescript\n\t         * import {RequestOptions, Request, RequestMethod} from '@angular/http';\n\t         *\n\t         * var options = new RequestOptions({\n\t         *   method: RequestMethod.Post\n\t         * });\n\t         * var req = new Request(options.merge({\n\t         *   url: 'https://google.com'\n\t         * }));\n\t         * console.log('req.method:', RequestMethod[req.method]); // Post\n\t         * console.log('options.url:', options.url); // null\n\t         * console.log('req.url:', req.url); // https://google.com\n\t         * ```\n\t         */\n\t        RequestOptions.prototype.merge = function (options) {\n\t            return new RequestOptions({\n\t                method: options && options.method != null ? options.method : this.method,\n\t                headers: options && options.headers != null ? options.headers : this.headers,\n\t                body: options && options.body != null ? options.body : this.body,\n\t                url: options && options.url != null ? options.url : this.url,\n\t                search: options && options.search != null ?\n\t                    (typeof options.search === 'string' ? new URLSearchParams(options.search) :\n\t                        options.search.clone()) :\n\t                    this.search,\n\t                withCredentials: options && options.withCredentials != null ? options.withCredentials :\n\t                    this.withCredentials,\n\t                responseType: options && options.responseType != null ? options.responseType :\n\t                    this.responseType\n\t            });\n\t        };\n\t        return RequestOptions;\n\t    }());\n\t    /**\n\t     * Subclass of {@link RequestOptions}, with default values.\n\t     *\n\t     * Default values:\n\t     *  * method: {@link RequestMethod RequestMethod.Get}\n\t     *  * headers: empty {@link Headers} object\n\t     *\n\t     * This class could be extended and bound to the {@link RequestOptions} class\n\t     * when configuring an {@link Injector}, in order to override the default options\n\t     * used by {@link Http} to create and send {@link Request Requests}.\n\t     *\n\t     * ### Example ([live demo](http://plnkr.co/edit/LEKVSx?p=preview))\n\t     *\n\t     * ```typescript\n\t     * import {provide} from '@angular/core';\n\t     * import {bootstrap} from '@angular/platform-browser/browser';\n\t     * import {HTTP_PROVIDERS, Http, BaseRequestOptions, RequestOptions} from '@angular/http';\n\t     * import {App} from './myapp';\n\t     *\n\t     * class MyOptions extends BaseRequestOptions {\n\t     *   search: string = 'coreTeam=true';\n\t     * }\n\t     *\n\t     * bootstrap(App, [HTTP_PROVIDERS, {provide: RequestOptions, useClass: MyOptions}]);\n\t     * ```\n\t     *\n\t     * The options could also be extended when manually creating a {@link Request}\n\t     * object.\n\t     *\n\t     * ### Example ([live demo](http://plnkr.co/edit/oyBoEvNtDhOSfi9YxaVb?p=preview))\n\t     *\n\t     * ```\n\t     * import {BaseRequestOptions, Request, RequestMethod} from '@angular/http';\n\t     *\n\t     * var options = new BaseRequestOptions();\n\t     * var req = new Request(options.merge({\n\t     *   method: RequestMethod.Post,\n\t     *   url: 'https://google.com'\n\t     * }));\n\t     * console.log('req.method:', RequestMethod[req.method]); // Post\n\t     * console.log('options.url:', options.url); // null\n\t     * console.log('req.url:', req.url); // https://google.com\n\t     * ```\n\t     *\n\t     * @experimental\n\t     */\n\t    var BaseRequestOptions = (function (_super) {\n\t        __extends$3(BaseRequestOptions, _super);\n\t        function BaseRequestOptions() {\n\t            _super.call(this, { method: exports.RequestMethod.Get, headers: new Headers() });\n\t        }\n\t        BaseRequestOptions.decorators = [\n\t            { type: _angular_core.Injectable },\n\t        ];\n\t        /** @nocollapse */\n\t        BaseRequestOptions.ctorParameters = [];\n\t        return BaseRequestOptions;\n\t    }(RequestOptions));\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$5 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    // TODO(jeffbcross): properly implement body accessors\n\t    /**\n\t     * Creates `Request` instances from provided values.\n\t     *\n\t     * The Request's interface is inspired by the Request constructor defined in the [Fetch\n\t     * Spec](https://fetch.spec.whatwg.org/#request-class),\n\t     * but is considered a static value whose body can be accessed many times. There are other\n\t     * differences in the implementation, but this is the most significant.\n\t     *\n\t     * `Request` instances are typically created by higher-level classes, like {@link Http} and\n\t     * {@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.\n\t     * One such example is when creating services that wrap higher-level services, like {@link Http},\n\t     * where it may be useful to generate a `Request` with arbitrary headers and search params.\n\t     *\n\t     * ```typescript\n\t     * import {Injectable, Injector} from '@angular/core';\n\t     * import {HTTP_PROVIDERS, Http, Request, RequestMethod} from '@angular/http';\n\t     *\n\t     * @Injectable()\n\t     * class AutoAuthenticator {\n\t     *   constructor(public http:Http) {}\n\t     *   request(url:string) {\n\t     *     return this.http.request(new Request({\n\t     *       method: RequestMethod.Get,\n\t     *       url: url,\n\t     *       search: 'password=123'\n\t     *     }));\n\t     *   }\n\t     * }\n\t     *\n\t     * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);\n\t     * var authenticator = injector.get(AutoAuthenticator);\n\t     * authenticator.request('people.json').subscribe(res => {\n\t     *   //URL should have included '?password=123'\n\t     *   console.log('people', res.json());\n\t     * });\n\t     * ```\n\t     *\n\t     * @experimental\n\t     */\n\t    var Request = (function (_super) {\n\t        __extends$5(Request, _super);\n\t        function Request(requestOptions) {\n\t            _super.call(this);\n\t            // TODO: assert that url is present\n\t            var url = requestOptions.url;\n\t            this.url = requestOptions.url;\n\t            if (requestOptions.search) {\n\t                var search = requestOptions.search.toString();\n\t                if (search.length > 0) {\n\t                    var prefix = '?';\n\t                    if (this.url.indexOf('?') != -1) {\n\t                        prefix = (this.url[this.url.length - 1] == '&') ? '' : '&';\n\t                    }\n\t                    // TODO: just delete search-query-looking string in url?\n\t                    this.url = url + prefix + search;\n\t                }\n\t            }\n\t            this._body = requestOptions.body;\n\t            this.method = normalizeMethodName(requestOptions.method);\n\t            // TODO(jeffbcross): implement behavior\n\t            // Defaults to 'omit', consistent with browser\n\t            this.headers = new Headers(requestOptions.headers);\n\t            this.contentType = this.detectContentType();\n\t            this.withCredentials = requestOptions.withCredentials;\n\t            this.responseType = requestOptions.responseType;\n\t        }\n\t        /**\n\t         * Returns the content type enum based on header options.\n\t         */\n\t        Request.prototype.detectContentType = function () {\n\t            switch (this.headers.get('content-type')) {\n\t                case 'application/json':\n\t                    return ContentType.JSON;\n\t                case 'application/x-www-form-urlencoded':\n\t                    return ContentType.FORM;\n\t                case 'multipart/form-data':\n\t                    return ContentType.FORM_DATA;\n\t                case 'text/plain':\n\t                case 'text/html':\n\t                    return ContentType.TEXT;\n\t                case 'application/octet-stream':\n\t                    return ContentType.BLOB;\n\t                default:\n\t                    return this.detectContentTypeFromBody();\n\t            }\n\t        };\n\t        /**\n\t         * Returns the content type of request's body based on its type.\n\t         */\n\t        Request.prototype.detectContentTypeFromBody = function () {\n\t            if (this._body == null) {\n\t                return ContentType.NONE;\n\t            }\n\t            else if (this._body instanceof URLSearchParams) {\n\t                return ContentType.FORM;\n\t            }\n\t            else if (this._body instanceof FormData) {\n\t                return ContentType.FORM_DATA;\n\t            }\n\t            else if (this._body instanceof Blob$1) {\n\t                return ContentType.BLOB;\n\t            }\n\t            else if (this._body instanceof ArrayBuffer$1) {\n\t                return ContentType.ARRAY_BUFFER;\n\t            }\n\t            else if (this._body && typeof this._body == 'object') {\n\t                return ContentType.JSON;\n\t            }\n\t            else {\n\t                return ContentType.TEXT;\n\t            }\n\t        };\n\t        /**\n\t         * Returns the request's body according to its type. If body is undefined, return\n\t         * null.\n\t         */\n\t        Request.prototype.getBody = function () {\n\t            switch (this.contentType) {\n\t                case ContentType.JSON:\n\t                    return this.text();\n\t                case ContentType.FORM:\n\t                    return this.text();\n\t                case ContentType.FORM_DATA:\n\t                    return this._body;\n\t                case ContentType.TEXT:\n\t                    return this.text();\n\t                case ContentType.BLOB:\n\t                    return this.blob();\n\t                case ContentType.ARRAY_BUFFER:\n\t                    return this.arrayBuffer();\n\t                default:\n\t                    return null;\n\t            }\n\t        };\n\t        return Request;\n\t    }(Body));\n\t    var noop = function () { };\n\t    var w = typeof window == 'object' ? window : noop;\n\t    var FormData = w['FormData'] || noop;\n\t    var Blob$1 = w['Blob'] || noop;\n\t    var ArrayBuffer$1 = w['ArrayBuffer'] || noop;\n\t\n\t    /**\n\t     * @license\n\t     * Copyright Google Inc. All Rights Reserved.\n\t     *\n\t     * Use of this source code is governed by an MIT-style license that can be\n\t     * found in the LICENSE file at https://angular.io/license\n\t     */\n\t    var __extends$4 = (this && this.__extends) || function (d, b) {\n\t        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\t        function __() { this.constructor = d; }\n\t        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n\t    };\n\t    function httpRequest(backend, request) {\n\t        return backend.createConnection(request).response;\n\t    }\n\t    function mergeOptions(defaultOpts, providedOpts, method, url) {\n\t        var newOptions = defaultOpts;\n\t        if (providedOpts) {\n\t            // Hack so Dart can used named parameters\n\t            return newOptions.merge(new RequestOptions({\n\t                method: providedOpts.method || method,\n\t                url: providedOpts.url || url,\n\t                search: providedOpts.search,\n\t                headers: providedOpts.headers,\n\t                body: providedOpts.body,\n\t                withCredentials: providedOpts.withCredentials,\n\t                responseType: providedOpts.responseType\n\t            }));\n\t        }\n\t        return newOptions.merge(new RequestOptions({ method: method, url: url }));\n\t    }\n\t    /**\n\t     * Performs http requests using `XMLHttpRequest` as the default backend.\n\t     *\n\t     * `Http` is available as an injectable class, with methods to perform http requests. Calling\n\t     * `request` returns an `Observable` which will emit a single {@link Response} when a\n\t     * response is received.\n\t     *\n\t     * ### Example\n\t     *\n\t     * ```typescript\n\t     * import {Http, HTTP_PROVIDERS} from '@angular/http';\n\t     * import 'rxjs/add/operator/map'\n\t     * @Component({\n\t     *   selector: 'http-app',\n\t     *   viewProviders: [HTTP_PROVIDERS],\n\t     *   templateUrl: 'people.html'\n\t     * })\n\t     * class PeopleComponent {\n\t     *   constructor(http: Http) {\n\t     *     http.get('people.json')\n\t     *       // Call map on the response observable to get the parsed people object\n\t     *       .map(res => res.json())\n\t     *       // Subscribe to the observable to get the parsed people object and attach it to the\n\t     *       // component\n\t     *       .subscribe(people => this.people = people);\n\t     *   }\n\t     * }\n\t     * ```\n\t     *\n\t     *\n\t     * ### Example\n\t     *\n\t     * ```\n\t     * http.get('people.json').subscribe((res:Response) => this.people = res.json());\n\t     * ```\n\t     *\n\t     * The default construct used to perform requests, `XMLHttpRequest`, is abstracted as a \"Backend\" (\n\t     * {@link XHRBackend} in this case), which could be mocked with dependency injection by replacing\n\t     * the {@link XHRBackend} provider, as in the following example:\n\t     *\n\t     * ### Example\n\t     *\n\t     * ```typescript\n\t     * import {BaseRequestOptions, Http} from '@angular/http';\n\t     * import {MockBackend} from '@angular/http/testing';\n\t     * var injector = Injector.resolveAndCreate([\n\t     *   BaseRequestOptions,\n\t     *   MockBackend,\n\t     *   {provide: Http, useFactory:\n\t     *       function(backend, defaultOptions) {\n\t     *         return new Http(backend, defaultOptions);\n\t     *       },\n\t     *       deps: [MockBackend, BaseRequestOptions]}\n\t     * ]);\n\t     * var http = injector.get(Http);\n\t     * http.get('request-from-mock-backend.json').subscribe((res:Response) => doSomething(res));\n\t     * ```\n\t     *\n\t     * @experimental\n\t     */\n\t    var Http = (function () {\n\t        function Http(_backend, _defaultOptions) {\n\t            this._backend = _backend;\n\t            this._defaultOptions = _defaultOptions;\n\t        }\n\t        /**\n\t         * Performs any type of http request. First argument is required, and can either be a url or\n\t         * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}\n\t         * object can be provided as the 2nd argument. The options object will be merged with the values\n\t         * of {@link BaseRequestOptions} before performing the request.\n\t         */\n\t        Http.prototype.request = function (url, options) {\n\t            var responseObservable;\n\t            if (typeof url === 'string') {\n\t                responseObservable = httpRequest(this._backend, new Request(mergeOptions(this._defaultOptions, options, exports.RequestMethod.Get, url)));\n\t            }\n\t            else if (url instanceof Request) {\n\t                responseObservable = httpRequest(this._backend, url);\n\t            }\n\t            else {\n\t                throw new Error('First argument must be a url string or Request instance.');\n\t            }\n\t            return responseObservable;\n\t        };\n\t        /**\n\t         * Performs a request with `get` http method.\n\t         */\n\t        Http.prototype.get = function (url, options) {\n\t            return this.request(new Request(mergeOptions(this._defaultOptions, options, exports.RequestMethod.Get, url)));\n\t        };\n\t        /**\n\t         * Performs a request with `post` http method.\n\t         */\n\t        Http.prototype.post = function (url, body, options) {\n\t            return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, exports.RequestMethod.Post, url)));\n\t        };\n\t        /**\n\t         * Performs a request with `put` http method.\n\t         */\n\t        Http.prototype.put = function (url, body, options) {\n\t            return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, exports.RequestMethod.Put, url)));\n\t        };\n\t        /**\n\t         * Performs a request with `delete` http method.\n\t         */\n\t        Http.prototype.delete = function (url, options) {\n\t            return this.request(new Request(mergeOptions(this._defaultOptions, options, exports.RequestMethod.Delete, url)));\n\t        };\n\t        /**\n\t         * Performs a request with `patch` http method.\n\t         */\n\t        Http.prototype.patch = function (url, body, options) {\n\t            return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, exports.RequestMethod.Patch, url)));\n\t        };\n\t        /**\n\t         * Performs a request with `head` http method.\n\t         */\n\t        Http.prototype.head = function (url, options) {\n\t            return this.request(new Request(mergeOptions(this._defaultOptions, options, exports.RequestMethod.Head, url)));\n\t        };\n\t        /**\n\t         * Performs a request with `options` http method.\n\t         */\n\t        Http.prototype.options = function (url, options) {\n\t            return this.request(new Request(mergeOptions(this._defaultOptions, options, exports.RequestMethod.Options, url)));\n\t        };\n\t        Http.decorators = [\n\t            { type: _angular_core.Injectable },\n\t        ];\n\t        /** @nocollapse */\n\t        Http.ctorParameters = [\n\t            { type: ConnectionBackend, },\n\t            { type: RequestOptions, },\n\t        ];\n\t        return Http;\n\t    }());\n\t    /**\n\t     * @experimental\n\t     */\n\t    var Jsonp = (function (_super) {\n\t        __extends$4(Jsonp, _super);\n\t        function Jsonp(backend, defaultOptions) {\n\t            _super.call(this, backend, defaultOptions);\n\t        }\n\t        /**\n\t         * Performs any type of http request. First argument is required, and can either be a url or\n\t         * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}\n\t         * object can be provided as the 2nd argument. The options object will be merged with the values\n\t         * of {@link BaseRequestOptions} before performing the request.\n\t         *\n\t         * @security Regular XHR is the safest alternative to JSONP for most applications, and is\n\t         * supported by all current browsers. Because JSONP creates a `<script>` element with\n\t         * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n\t         * source could expose your application to XSS risks. Data exposed by JSONP may also be\n\t         * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n\t         * future security issues (e.g. content sniffing).  For more detail, see the\n\t         * [Security Guide](http://g.co/ng/security).\n\t         */\n\t        Jsonp.prototype.request = function (url, options) {\n\t            var responseObservable;\n\t            if (typeof url === 'string') {\n\t                url =\n\t                    new Request(mergeOptions(this._defaultOptions, options, exports.RequestMethod.Get, url));\n\t            }\n\t            if (url instanceof Request) {\n\t                if (url.method !== exports.RequestMethod.Get) {\n\t                    throw new Error('JSONP requests must use GET request method.');\n\t                }\n\t                responseObservable = httpRequest(this._backend, url);\n\t            }\n\t            else {\n\t                throw new Error('First argument must be a url string or Request instance.');\n\t            }\n\t            return responseObservable;\n\t        };\n\t        Jsonp.decorators = [\n\t            { type: _angular_core.Injectable },\n\t        ];\n\t        /** @nocollapse */\n\t        Jsonp.ctorParameters = [\n\t            { type: ConnectionBackend, },\n\t            { type: RequestOptions, },\n\t        ];\n\t        return Jsonp;\n\t    }(Http));\n\t\n\t    function _createDefaultCookieXSRFStrategy() {\n\t        return new CookieXSRFStrategy();\n\t    }\n\t    function httpFactory(xhrBackend, requestOptions) {\n\t        return new Http(xhrBackend, requestOptions);\n\t    }\n\t    function jsonpFactory(jsonpBackend, requestOptions) {\n\t        return new Jsonp(jsonpBackend, requestOptions);\n\t    }\n\t    /**\n\t     * The module that includes http's providers\n\t     *\n\t     * @experimental\n\t     */\n\t    var HttpModule = (function () {\n\t        function HttpModule() {\n\t        }\n\t        HttpModule.decorators = [\n\t            { type: _angular_core.NgModule, args: [{\n\t                        providers: [\n\t                            // TODO(pascal): use factory type annotations once supported in DI\n\t                            // issue: https://github.com/angular/angular/issues/3183\n\t                            { provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions] },\n\t                            BrowserXhr,\n\t                            { provide: RequestOptions, useClass: BaseRequestOptions },\n\t                            { provide: ResponseOptions, useClass: BaseResponseOptions },\n\t                            XHRBackend,\n\t                            { provide: XSRFStrategy, useFactory: _createDefaultCookieXSRFStrategy },\n\t                        ],\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        HttpModule.ctorParameters = [];\n\t        return HttpModule;\n\t    }());\n\t    /**\n\t     * The module that includes jsonp's providers\n\t     *\n\t     * @experimental\n\t     */\n\t    var JsonpModule = (function () {\n\t        function JsonpModule() {\n\t        }\n\t        JsonpModule.decorators = [\n\t            { type: _angular_core.NgModule, args: [{\n\t                        providers: [\n\t                            // TODO(pascal): use factory type annotations once supported in DI\n\t                            // issue: https://github.com/angular/angular/issues/3183\n\t                            { provide: Jsonp, useFactory: jsonpFactory, deps: [JSONPBackend, RequestOptions] },\n\t                            BrowserJsonp,\n\t                            { provide: RequestOptions, useClass: BaseRequestOptions },\n\t                            { provide: ResponseOptions, useClass: BaseResponseOptions },\n\t                            { provide: JSONPBackend, useClass: JSONPBackend_ },\n\t                        ],\n\t                    },] },\n\t        ];\n\t        /** @nocollapse */\n\t        JsonpModule.ctorParameters = [];\n\t        return JsonpModule;\n\t    }());\n\t\n\t    exports.BrowserXhr = BrowserXhr;\n\t    exports.JSONPBackend = JSONPBackend;\n\t    exports.JSONPConnection = JSONPConnection;\n\t    exports.CookieXSRFStrategy = CookieXSRFStrategy;\n\t    exports.XHRBackend = XHRBackend;\n\t    exports.XHRConnection = XHRConnection;\n\t    exports.BaseRequestOptions = BaseRequestOptions;\n\t    exports.RequestOptions = RequestOptions;\n\t    exports.BaseResponseOptions = BaseResponseOptions;\n\t    exports.ResponseOptions = ResponseOptions;\n\t    exports.Headers = Headers;\n\t    exports.Http = Http;\n\t    exports.Jsonp = Jsonp;\n\t    exports.HttpModule = HttpModule;\n\t    exports.JsonpModule = JsonpModule;\n\t    exports.Connection = Connection;\n\t    exports.ConnectionBackend = ConnectionBackend;\n\t    exports.XSRFStrategy = XSRFStrategy;\n\t    exports.Request = Request;\n\t    exports.Response = Response;\n\t    exports.QueryEncoder = QueryEncoder;\n\t    exports.URLSearchParams = URLSearchParams;\n\t\n\t}));\n\n/***/ }\n\n});\n\n\n/** WEBPACK FOOTER **\n ** main.c72c99b2c5709eda9f86.bundle.js\n **/","import { Component } from '@angular/core';\nimport { WikipediaService } from './wikipedia.service';\nimport { Observable }       from 'rxjs/Observable';\n\n@Component({\n  selector: 'my-app',\n  template: `<h1>{{name}}</h1>\n     <div><h2>selected: {{selectedItem.toString()}}</h2></div>\n     <div><h2>inputChanged: {{inputChanged.toString()}}</h2></div>\n     <h2>String:</h2>\n     <div>\n       <input autocomplete [items]=\"items\"\n         (inputChangedEvent)=\"onInputChangedEvent($event)\"\n         (selectEvent)=\"onSelect($event)\">\n     </div>\n     <h2>Objects:</h2>\n     <div>\n       <input autocomplete [config]=\"config2\" [items]=\"items2\"\n       (inputChangedEvent)=\"onInputChangedEvent($event)\"\n       (selectEvent)=\"onSelect($event)\">\n     </div>\n     <h2>Wiki:</h2>\n     <div>\n       <input autocomplete [items]=\"wikiItems\"\n       (inputChangedEvent)=\"search($event)\"\n       (selectEvent)=\"onSelect($event)\">\n     </div>\n  `,\n  providers: [ WikipediaService ]\n})\nexport class AppComponent  {\n  name = 'autocomplete';\n  selectedItem: any = '';\n  inputChanged: any = '';\n  wikiItems: any[] = [];\n  items: any[] = ['a', 'ab'];\n  items2: any[] = [{id: 0, payload: {label: 'Tom'}},\n    {id: 1, payload: {label: 'John'}},\n    {id: 2, payload: {label: 'Lisa'}},\n    {id: 3, payload: {label: 'Js'}},\n    {id: 4, payload: {label: 'Java'}},\n    {id: 5, payload: {label: 'c'}},\n    {id: 6, payload: {label: 'vc'}}\n  ];\n  config2: any = {'placeholder': 'test', 'sourceField': ['payload', 'label']};\n\n  constructor(private service: WikipediaService) {}\n\n  onSelect(item: any) {\n    this.selectedItem = item;\n  }\n\n  onInputChangedEvent(val: string) {\n    this.inputChanged = val;\n  }\n\n  search (term: string) {\n    this.service.search(term).subscribe(e => this.wikiItems = e, error => console.log(error));\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./app/app.component.ts\n **/","import { NgModule }      from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule } from '@angular/forms';\nimport { HttpModule, JsonpModule }  from '@angular/http';\n\nimport { AppComponent }  from './app.component';\nimport { AutocompleteModule } from './autocomplete/ng2-input-autocomplete';\n\n@NgModule({\n  imports:      [ BrowserModule, AutocompleteModule.forRoot(), FormsModule,\n    HttpModule, JsonpModule ],\n  declarations: [ AppComponent ],\n  bootstrap:    [ AppComponent ]\n})\nexport class AppModule { }\n\n\n\n/** WEBPACK FOOTER **\n ** ./app/app.module.ts\n **/","/*\n  MIT LICENSE @liuy97\n*/\nimport {\n  Component,\n  ComponentFactoryResolver,\n  ComponentRef,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostListener,\n  Input,\n  NgModule,\n  ModuleWithProviders,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  SimpleChange,\n  ViewContainerRef\n} from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\n@Component({\n  selector: 'ng2-input-autocomplete',\n  template: `\n  <div class=\"autocomplete\">\n    <input type=\"text\"\n      placeholder=\"{{placeholder}}\"\n      (blur)=\"showAutoComplete = false;\"\n      (focus)=\"showAutoComplete = true;\"\n      [value]=\"value\"\n      (keyup)=\"enterText($event)\">\n    <ul *ngIf=\"showAutoComplete && candidates.length > 0\">\n      <li *ngFor=\"let candidate of candidates; let idx = index\"\n        [ngClass]=\"{ active: (idx === selectedIndex) }\"\n        (mouseover)=\"selectedIndex = idx;\"\n        (mousedown)=\"onSelect(idx)\">\n        {{candiatesLabels[idx]}}\n      </li>\n    </ul>\n  </div>`,\n  styles: [\n    `.autocomplete ul {\n       position: absolute;\n       left: 0;\n       width: 100%;\n       border-left: 1px solid #888;\n       border-right: 1px solid #888;\n       border-bottom: 1px solid #888;\n       list-style: none;\n       padding-left: 0px;\n       margin-top: 2px;\n       background-color: #fff;\n       z-index: 100;\n     }\n     .autocomplete li {\n       text-align: left;\n       list-style: none;\n       width: 100%;\n       padding: 0.4em 0 0.4em 0;\n     }\n     .autocomplete li.active {\n       width: 100%;\n       background-color: #4bf;\n     }\n\n     .autocomplete .highlight {\n       background-color: #e2e2e2;\n     }\n     .autocomplete li.active .highlight {\n       background: #666;\n       color: #fff;\n     }`\n  ],\n})\n\nexport class AutocompleteComponent implements OnInit, OnChanges {\n  @Input() items:  any[];\n  @Input() config: any;\n  @Output() selectEvent: EventEmitter<any> = new EventEmitter<any>();\n  @Output() inputChangedEvent: EventEmitter<any> = new EventEmitter<any>();\n  inputElement: HTMLInputElement;\n  value: string;\n  candidates: any[];\n  candiatesLabels: any[];\n  selectedIndex: number;\n  showAutoComplete: boolean;\n  placeholder: string;\n  private sourceField: any;\n  private thisElement: HTMLElement;\n\n  constructor(elementRef: ElementRef) {\n    this.thisElement = elementRef.nativeElement;\n    this.selectedIndex = 0;\n    this.showAutoComplete = false;\n    this.value = '';\n  }\n\n  ngOnInit() {\n    this.placeholder = 'autocomplete';\n    this.inputElement = <HTMLInputElement>(this.thisElement.querySelector('input'));\n\n    if(!this.isNull(this.config)) {\n      if(!this.isNull(this.config.placeholder)) {\n        this.placeholder = this.config.placeholder;\n      }\n      if(!this.isNull(this.config.sourceField)) {\n        this.sourceField = this.config.sourceField;\n      }\n    }\n    this.filterItems(this.value);\n    this.inputElement.focus();\n  }\n\n  ngOnChanges() {\n    this.filterItems(this.value);\n  }\n\n  enterText(event: any) {\n    let total = this.candidates.length;\n    switch (event.keyCode) {\n      case 27:\n        this.showAutoComplete = false;\n        break;\n      case 38:\n        this.selectedIndex = (total + this.selectedIndex - 1) % total;\n        break;\n      case 40:\n        this.selectedIndex = (total + this.selectedIndex + 1) % total;\n        break;\n      case 13:\n        if (this.candidates.length > 0) {\n          this.onSelect(this.selectedIndex);\n        }\n        event.preventDefault();\n        break;\n      default:\n        this.value = event.target.value;\n        this.inputChangedEvent.emit(this.value);\n        break;\n    }\n  }\n\n  onSelect(idx: number) {\n    this.showAutoComplete = false;\n    this.value = this.candiatesLabels[idx];\n    this.selectEvent.emit(this.candidates[idx]);\n  }\n\n  filterItems(search: string) {\n    let field = this.sourceField;\n    let filterItem = this.filterItem;\n    if (this.items) {\n      this.candidates = this.items.filter(\n        function (item) {\n          return filterItem(item, field, search);\n        });\n      this.buildLabels();\n    }\n  }\n\n  private getFieldValue(object: any, path: any) {\n    if (typeof object === 'string') {\n      return object;\n    }\n    if (path instanceof Array) {\n      let result: any = object;\n      path.forEach((element: any) => {\n        if (result !== null && result !== undefined\n          && result[element] !== null && result[element] !== undefined) {\n          result = result[element];\n        } else {\n          result = '';\n        }\n      });\n      return result;\n    } else {\n      return object[path] || '';\n    }\n  }\n\n  private isNull(object: any) {\n    return object === null || object === undefined;\n  }\n\n  private buildLabels() {\n    let field = this.sourceField;\n    let getFieldValue = this.getFieldValue;\n    this.candiatesLabels = this.candidates.map((e: any) => getFieldValue(e, field));\n  }\n\n  private filterItem(item: any, path: any, search: string) {\n    if(search === null || search === undefined || search.length === 0) {\n      return true;\n    }\n    let result: any;\n    if (typeof item === 'string') {\n      result = item;\n    } else if (path instanceof Array) {\n      result = item;\n      path.forEach((element: any) => {\n        if (result !== null && result !== undefined\n          && result[element] !== null && result[element] !== undefined) {\n          result = result[element];\n        } else {\n          result = '';\n        }\n      });\n    } else {\n      result = item[path] || '';\n    }\n    return result.toLowerCase().indexOf(search.toLowerCase()) >= 0;\n  }\n\n}\n\n@Directive({\n  selector: '[autocomplete]',\n})\nexport class AutocompleteDirective implements OnInit, OnDestroy, OnChanges {\n  @Input() config: any;\n  @Input() items: any;\n  @Input() ngModel: String;\n  @Output() ngModelChange = new EventEmitter();\n  @Output() inputChangedEvent = new EventEmitter();\n  @Output() selectEvent = new EventEmitter();\n\n  private componentRef: ComponentRef<AutocompleteComponent>;\n  private thisElement: HTMLElement;\n  private autocompleteElement: HTMLElement;\n  private inputElement: HTMLInputElement;\n  private tabIndex: number;\n\n  constructor(private resolver: ComponentFactoryResolver,\n    public viewContainerRef: ViewContainerRef) {\n    this.thisElement = this.viewContainerRef.element.nativeElement;\n  }\n\n  ngOnInit() {\n    this.createDiv();\n  }\n\n  ngOnDestroy() {\n    if (this.componentRef) {\n      this.componentRef.instance.selectEvent.unsubscribe();\n      this.componentRef.instance.inputChangedEvent.unsubscribe();\n    }\n    document.removeEventListener('click', this.hideAutocomplete);\n  }\n\n  ngOnChanges(changes: {[propKey: string]: SimpleChange}) {\n    if(changes['items'] && this.componentRef) {\n      let component = this.componentRef.instance;\n      component.items = changes['items'].currentValue;\n      component.filterItems(component.value);\n    }\n  }\n\n  @HostListener('click')\n  @HostListener('focus')\n  showAutocomplete() {\n    this.hideAutocomplete();\n    this.createAutocomplete();\n  }\n\n  hideAutocomplete = (event?: any): void => {\n    if (!this.componentRef) {\n      return;\n    }\n    if (!event || event.type === 'click') {\n      this.componentRef.destroy();\n      this.componentRef = undefined;\n    }\n    if (this.inputElement['tabIndex'] < 0) {\n      this.inputElement['tabIndex'] = this.tabIndex;\n    }\n  };\n\n  onInputChanged = (val: string) => {\n    this.inputElement.value = val;\n    if (val !== this.ngModel) {\n      this.ngModelChange.emit(val);\n    }\n    let component = this.componentRef.instance;\n    component.filterItems(val);\n    this.inputChangedEvent.emit(val);\n  };\n\n  onSelect = (item: any) => {\n    let component = this.componentRef.instance;\n    let val = component.value;\n    if (val !== this.ngModel) {\n      this.ngModelChange.emit(val);\n    }\n    this.selectEvent.emit(item);\n    if (this.inputElement) {\n      this.inputElement.value = '' + val;\n    }\n    this.hideAutocomplete();\n  };\n\n  private createDiv() {\n    let element = document.createElement('div');\n    element.style.display = 'inline-block';\n    element.style.position = 'relative';\n    this.thisElement.parentElement.insertBefore(element, this.thisElement.nextSibling);\n    element.appendChild(this.thisElement);\n    document.addEventListener('click', this.hideAutocomplete);\n  }\n\n  private createAutocomplete() {\n    let factory = this.resolver.resolveComponentFactory(AutocompleteComponent);\n    this.componentRef = this.viewContainerRef.createComponent(factory);\n    let component = this.componentRef.instance;\n    component.config = this.config;\n    component.items = this.items;\n    component.selectEvent.subscribe(this.onSelect);\n    component.inputChangedEvent.subscribe(this.onInputChanged);\n    this.autocompleteElement = this.componentRef.location.nativeElement;\n    this.autocompleteElement.style.display = 'none';\n    this.inputElement = <HTMLInputElement>this.thisElement;\n    if (this.thisElement.tagName !== 'INPUT' && this.autocompleteElement) {\n      this.inputElement = <HTMLInputElement>this.thisElement.querySelector('input');\n      this.inputElement.parentElement.insertBefore(this.autocompleteElement, this.inputElement.nextSibling);\n    }\n    component.value = this.inputElement.value;\n    this.tabIndex = this.inputElement['tabIndex'];\n    this.inputElement['tabIndex'] = -100;\n    if (this.componentRef) {\n      let rect = this.thisElement.getBoundingClientRect();\n      let style = this.autocompleteElement.style;\n      style.width = rect.width + 'px';\n      style.position = 'absolute';\n      style.zIndex = '1';\n      style.top = '0';\n      style.left = '0';\n      style.display = 'inline-block';\n    }\n  }\n}\n\n@NgModule({\n  imports: [ CommonModule, FormsModule ],\n  declarations: [ AutocompleteComponent, AutocompleteDirective ],\n  exports:  [ AutocompleteComponent, AutocompleteDirective ],\n  entryComponents: [ AutocompleteComponent ]\n})\n\nexport class AutocompleteModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: AutocompleteModule\n    };\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./app/autocomplete/ng2-input-autocomplete.ts\n **/","import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app.module';\n\nplatformBrowserDynamic().bootstrapModule(AppModule);\n\n\n\n/** WEBPACK FOOTER **\n ** ./app/main.ts\n **/","import { Injectable } from '@angular/core';\nimport { Jsonp, URLSearchParams } from '@angular/http';\nimport 'rxjs/add/operator/map';\n\n@Injectable()\nexport class WikipediaService {\n  constructor(private jsonp: Jsonp) {}\n\n  search (term: string) {\n\n    let wikiUrl = 'https://en.wikipedia.org/w/api.php';\n\n    let params = new URLSearchParams();\n    params.set('search', term); // the user's search value\n    params.set('action', 'opensearch');\n    params.set('format', 'json');\n    params.set('callback', 'JSONP_CALLBACK');\n\n    // TODO: Add error handling\n    return this.jsonp\n               .get(wikiUrl, { search: params })\n               .map(response => <string[]> response.json()[1]);\n  }\n}\n\n\n/*\nCopyright 2016 Google Inc. All Rights Reserved.\nUse of this source code is governed by an MIT-style license that\ncan be found in the LICENSE file at http://angular.io/license\n*/\n\n\n/** WEBPACK FOOTER **\n ** ./app/wikipedia.service.ts\n **/","/**\n * @license Angular v2.2.4\n * (c) 2010-2016 Google, Inc. https://angular.io/\n * License: MIT\n */\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs/Observable'), require('@angular/platform-browser')) :\n    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', 'rxjs/Observable', '@angular/platform-browser'], factory) :\n    (factory((global.ng = global.ng || {}, global.ng.http = global.ng.http || {}),global.ng.core,global.Rx,global.ng.platformBrowser));\n}(this, function (exports,_angular_core,rxjs_Observable,_angular_platformBrowser) { 'use strict';\n\n    /**\n     * A backend for http that uses the `XMLHttpRequest` browser API.\n     *\n     * Take care not to evaluate this in non-browser contexts.\n     *\n     * @experimental\n     */\n    var BrowserXhr = (function () {\n        function BrowserXhr() {\n        }\n        BrowserXhr.prototype.build = function () { return (new XMLHttpRequest()); };\n        BrowserXhr.decorators = [\n            { type: _angular_core.Injectable },\n        ];\n        /** @nocollapse */\n        BrowserXhr.ctorParameters = [];\n        return BrowserXhr;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Supported http methods.\n     * @experimental\n     */\n    exports.RequestMethod;\n    (function (RequestMethod) {\n        RequestMethod[RequestMethod[\"Get\"] = 0] = \"Get\";\n        RequestMethod[RequestMethod[\"Post\"] = 1] = \"Post\";\n        RequestMethod[RequestMethod[\"Put\"] = 2] = \"Put\";\n        RequestMethod[RequestMethod[\"Delete\"] = 3] = \"Delete\";\n        RequestMethod[RequestMethod[\"Options\"] = 4] = \"Options\";\n        RequestMethod[RequestMethod[\"Head\"] = 5] = \"Head\";\n        RequestMethod[RequestMethod[\"Patch\"] = 6] = \"Patch\";\n    })(exports.RequestMethod || (exports.RequestMethod = {}));\n    /**\n     * All possible states in which a connection can be, based on\n     * [States](http://www.w3.org/TR/XMLHttpRequest/#states) from the `XMLHttpRequest` spec, but with an\n     * additional \"CANCELLED\" state.\n     * @experimental\n     */\n    exports.ReadyState;\n    (function (ReadyState) {\n        ReadyState[ReadyState[\"Unsent\"] = 0] = \"Unsent\";\n        ReadyState[ReadyState[\"Open\"] = 1] = \"Open\";\n        ReadyState[ReadyState[\"HeadersReceived\"] = 2] = \"HeadersReceived\";\n        ReadyState[ReadyState[\"Loading\"] = 3] = \"Loading\";\n        ReadyState[ReadyState[\"Done\"] = 4] = \"Done\";\n        ReadyState[ReadyState[\"Cancelled\"] = 5] = \"Cancelled\";\n    })(exports.ReadyState || (exports.ReadyState = {}));\n    /**\n     * Acceptable response types to be associated with a {@link Response}, based on\n     * [ResponseType](https://fetch.spec.whatwg.org/#responsetype) from the Fetch spec.\n     * @experimental\n     */\n    exports.ResponseType;\n    (function (ResponseType) {\n        ResponseType[ResponseType[\"Basic\"] = 0] = \"Basic\";\n        ResponseType[ResponseType[\"Cors\"] = 1] = \"Cors\";\n        ResponseType[ResponseType[\"Default\"] = 2] = \"Default\";\n        ResponseType[ResponseType[\"Error\"] = 3] = \"Error\";\n        ResponseType[ResponseType[\"Opaque\"] = 4] = \"Opaque\";\n    })(exports.ResponseType || (exports.ResponseType = {}));\n    /**\n     * Supported content type to be automatically associated with a {@link Request}.\n     * @experimental\n     */\n    var ContentType;\n    (function (ContentType) {\n        ContentType[ContentType[\"NONE\"] = 0] = \"NONE\";\n        ContentType[ContentType[\"JSON\"] = 1] = \"JSON\";\n        ContentType[ContentType[\"FORM\"] = 2] = \"FORM\";\n        ContentType[ContentType[\"FORM_DATA\"] = 3] = \"FORM_DATA\";\n        ContentType[ContentType[\"TEXT\"] = 4] = \"TEXT\";\n        ContentType[ContentType[\"BLOB\"] = 5] = \"BLOB\";\n        ContentType[ContentType[\"ARRAY_BUFFER\"] = 6] = \"ARRAY_BUFFER\";\n    })(ContentType || (ContentType = {}));\n    /**\n     * Define which buffer to use to store the response\n     * @experimental\n     */\n    exports.ResponseContentType;\n    (function (ResponseContentType) {\n        ResponseContentType[ResponseContentType[\"Text\"] = 0] = \"Text\";\n        ResponseContentType[ResponseContentType[\"Json\"] = 1] = \"Json\";\n        ResponseContentType[ResponseContentType[\"ArrayBuffer\"] = 2] = \"ArrayBuffer\";\n        ResponseContentType[ResponseContentType[\"Blob\"] = 3] = \"Blob\";\n    })(exports.ResponseContentType || (exports.ResponseContentType = {}));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Polyfill for [Headers](https://developer.mozilla.org/en-US/docs/Web/API/Headers/Headers), as\n     * specified in the [Fetch Spec](https://fetch.spec.whatwg.org/#headers-class).\n     *\n     * The only known difference between this `Headers` implementation and the spec is the\n     * lack of an `entries` method.\n     *\n     * ### Example\n     *\n     * ```\n     * import {Headers} from '@angular/http';\n     *\n     * var firstHeaders = new Headers();\n     * firstHeaders.append('Content-Type', 'image/jpeg');\n     * console.log(firstHeaders.get('Content-Type')) //'image/jpeg'\n     *\n     * // Create headers from Plain Old JavaScript Object\n     * var secondHeaders = new Headers({\n     *   'X-My-Custom-Header': 'Angular'\n     * });\n     * console.log(secondHeaders.get('X-My-Custom-Header')); //'Angular'\n     *\n     * var thirdHeaders = new Headers(secondHeaders);\n     * console.log(thirdHeaders.get('X-My-Custom-Header')); //'Angular'\n     * ```\n     *\n     * @experimental\n     */\n    var Headers = (function () {\n        // TODO(vicb): any -> string|string[]\n        function Headers(headers) {\n            var _this = this;\n            /** @internal header names are lower case */\n            this._headers = new Map();\n            /** @internal map lower case names to actual names */\n            this._normalizedNames = new Map();\n            if (!headers) {\n                return;\n            }\n            if (headers instanceof Headers) {\n                headers.forEach(function (values, name) {\n                    values.forEach(function (value) { return _this.append(name, value); });\n                });\n                return;\n            }\n            Object.keys(headers).forEach(function (name) {\n                var values = Array.isArray(headers[name]) ? headers[name] : [headers[name]];\n                _this.delete(name);\n                values.forEach(function (value) { return _this.append(name, value); });\n            });\n        }\n        /**\n         * Returns a new Headers instance from the given DOMString of Response Headers\n         */\n        Headers.fromResponseHeaderString = function (headersString) {\n            var headers = new Headers();\n            headersString.split('\\n').forEach(function (line) {\n                var index = line.indexOf(':');\n                if (index > 0) {\n                    var name_1 = line.slice(0, index);\n                    var value = line.slice(index + 1).trim();\n                    headers.set(name_1, value);\n                }\n            });\n            return headers;\n        };\n        /**\n         * Appends a header to existing list of header values for a given header name.\n         */\n        Headers.prototype.append = function (name, value) {\n            var values = this.getAll(name);\n            if (values === null) {\n                this.set(name, value);\n            }\n            else {\n                values.push(value);\n            }\n        };\n        /**\n         * Deletes all header values for the given name.\n         */\n        Headers.prototype.delete = function (name) {\n            var lcName = name.toLowerCase();\n            this._normalizedNames.delete(lcName);\n            this._headers.delete(lcName);\n        };\n        Headers.prototype.forEach = function (fn) {\n            var _this = this;\n            this._headers.forEach(function (values, lcName) { return fn(values, _this._normalizedNames.get(lcName), _this._headers); });\n        };\n        /**\n         * Returns first header that matches given name.\n         */\n        Headers.prototype.get = function (name) {\n            var values = this.getAll(name);\n            if (values === null) {\n                return null;\n            }\n            return values.length > 0 ? values[0] : null;\n        };\n        /**\n         * Checks for existence of header by given name.\n         */\n        Headers.prototype.has = function (name) { return this._headers.has(name.toLowerCase()); };\n        /**\n         * Returns the names of the headers\n         */\n        Headers.prototype.keys = function () { return Array.from(this._normalizedNames.values()); };\n        /**\n         * Sets or overrides header value for given name.\n         */\n        Headers.prototype.set = function (name, value) {\n            if (Array.isArray(value)) {\n                if (value.length) {\n                    this._headers.set(name.toLowerCase(), [value.join(',')]);\n                }\n            }\n            else {\n                this._headers.set(name.toLowerCase(), [value]);\n            }\n            this.mayBeSetNormalizedName(name);\n        };\n        /**\n         * Returns values of all headers.\n         */\n        Headers.prototype.values = function () { return Array.from(this._headers.values()); };\n        /**\n         * Returns string of all headers.\n         */\n        // TODO(vicb): returns {[name: string]: string[]}\n        Headers.prototype.toJSON = function () {\n            var _this = this;\n            var serialized = {};\n            this._headers.forEach(function (values, name) {\n                var split = [];\n                values.forEach(function (v) { return split.push.apply(split, v.split(',')); });\n                serialized[_this._normalizedNames.get(name)] = split;\n            });\n            return serialized;\n        };\n        /**\n         * Returns list of header values for a given name.\n         */\n        Headers.prototype.getAll = function (name) {\n            return this.has(name) ? this._headers.get(name.toLowerCase()) : null;\n        };\n        /**\n         * This method is not implemented.\n         */\n        Headers.prototype.entries = function () { throw new Error('\"entries\" method is not implemented on Headers class'); };\n        Headers.prototype.mayBeSetNormalizedName = function (name) {\n            var lcName = name.toLowerCase();\n            if (!this._normalizedNames.has(lcName)) {\n                this._normalizedNames.set(lcName, name);\n            }\n        };\n        return Headers;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$1 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * Creates a response options object to be optionally provided when instantiating a\n     * {@link Response}.\n     *\n     * This class is based on the `ResponseInit` description in the [Fetch\n     * Spec](https://fetch.spec.whatwg.org/#responseinit).\n     *\n     * All values are null by default. Typical defaults can be found in the\n     * {@link BaseResponseOptions} class, which sub-classes `ResponseOptions`.\n     *\n     * This class may be used in tests to build {@link Response Responses} for\n     * mock responses (see {@link MockBackend}).\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/P9Jkk8e8cz6NVzbcxEsD?p=preview))\n     *\n     * ```typescript\n     * import {ResponseOptions, Response} from '@angular/http';\n     *\n     * var options = new ResponseOptions({\n     *   body: '{\"name\":\"Jeff\"}'\n     * });\n     * var res = new Response(options);\n     *\n     * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n     * ```\n     *\n     * @experimental\n     */\n    var ResponseOptions = (function () {\n        function ResponseOptions(_a) {\n            var _b = _a === void 0 ? {} : _a, body = _b.body, status = _b.status, headers = _b.headers, statusText = _b.statusText, type = _b.type, url = _b.url;\n            this.body = body != null ? body : null;\n            this.status = status != null ? status : null;\n            this.headers = headers != null ? headers : null;\n            this.statusText = statusText != null ? statusText : null;\n            this.type = type != null ? type : null;\n            this.url = url != null ? url : null;\n        }\n        /**\n         * Creates a copy of the `ResponseOptions` instance, using the optional input as values to\n         * override\n         * existing values. This method will not change the values of the instance on which it is being\n         * called.\n         *\n         * This may be useful when sharing a base `ResponseOptions` object inside tests,\n         * where certain properties may change from test to test.\n         *\n         * ### Example ([live demo](http://plnkr.co/edit/1lXquqFfgduTFBWjNoRE?p=preview))\n         *\n         * ```typescript\n         * import {ResponseOptions, Response} from '@angular/http';\n         *\n         * var options = new ResponseOptions({\n         *   body: {name: 'Jeff'}\n         * });\n         * var res = new Response(options.merge({\n         *   url: 'https://google.com'\n         * }));\n         * console.log('options.url:', options.url); // null\n         * console.log('res.json():', res.json()); // Object {name: \"Jeff\"}\n         * console.log('res.url:', res.url); // https://google.com\n         * ```\n         */\n        ResponseOptions.prototype.merge = function (options) {\n            return new ResponseOptions({\n                body: options && options.body != null ? options.body : this.body,\n                status: options && options.status != null ? options.status : this.status,\n                headers: options && options.headers != null ? options.headers : this.headers,\n                statusText: options && options.statusText != null ? options.statusText : this.statusText,\n                type: options && options.type != null ? options.type : this.type,\n                url: options && options.url != null ? options.url : this.url,\n            });\n        };\n        return ResponseOptions;\n    }());\n    /**\n     * Subclass of {@link ResponseOptions}, with default values.\n     *\n     * Default values:\n     *  * status: 200\n     *  * headers: empty {@link Headers} object\n     *\n     * This class could be extended and bound to the {@link ResponseOptions} class\n     * when configuring an {@link Injector}, in order to override the default options\n     * used by {@link Http} to create {@link Response Responses}.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/qv8DLT?p=preview))\n     *\n     * ```typescript\n     * import {provide} from '@angular/core';\n     * import {bootstrap} from '@angular/platform-browser/browser';\n     * import {HTTP_PROVIDERS, Headers, Http, BaseResponseOptions, ResponseOptions} from\n     * '@angular/http';\n     * import {App} from './myapp';\n     *\n     * class MyOptions extends BaseResponseOptions {\n     *   headers:Headers = new Headers({network: 'github'});\n     * }\n     *\n     * bootstrap(App, [HTTP_PROVIDERS, {provide: ResponseOptions, useClass: MyOptions}]);\n     * ```\n     *\n     * The options could also be extended when manually creating a {@link Response}\n     * object.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/VngosOWiaExEtbstDoix?p=preview))\n     *\n     * ```\n     * import {BaseResponseOptions, Response} from '@angular/http';\n     *\n     * var options = new BaseResponseOptions();\n     * var res = new Response(options.merge({\n     *   body: 'Angular',\n     *   headers: new Headers({framework: 'angular'})\n     * }));\n     * console.log('res.headers.get(\"framework\"):', res.headers.get('framework')); // angular\n     * console.log('res.text():', res.text()); // Angular;\n     * ```\n     *\n     * @experimental\n     */\n    var BaseResponseOptions = (function (_super) {\n        __extends$1(BaseResponseOptions, _super);\n        function BaseResponseOptions() {\n            _super.call(this, { status: 200, statusText: 'Ok', type: exports.ResponseType.Default, headers: new Headers() });\n        }\n        BaseResponseOptions.decorators = [\n            { type: _angular_core.Injectable },\n        ];\n        /** @nocollapse */\n        BaseResponseOptions.ctorParameters = [];\n        return BaseResponseOptions;\n    }(ResponseOptions));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Abstract class from which real backends are derived.\n     *\n     * The primary purpose of a `ConnectionBackend` is to create new connections to fulfill a given\n     * {@link Request}.\n     *\n     * @experimental\n     */\n    var ConnectionBackend = (function () {\n        function ConnectionBackend() {\n        }\n        return ConnectionBackend;\n    }());\n    /**\n     * Abstract class from which real connections are derived.\n     *\n     * @experimental\n     */\n    var Connection = (function () {\n        function Connection() {\n        }\n        return Connection;\n    }());\n    /**\n     * An XSRFStrategy configures XSRF protection (e.g. via headers) on an HTTP request.\n     *\n     * @experimental\n     */\n    var XSRFStrategy = (function () {\n        function XSRFStrategy() {\n        }\n        return XSRFStrategy;\n    }());\n\n    function normalizeMethodName(method) {\n        if (typeof method !== 'string')\n            return method;\n        switch (method.toUpperCase()) {\n            case 'GET':\n                return exports.RequestMethod.Get;\n            case 'POST':\n                return exports.RequestMethod.Post;\n            case 'PUT':\n                return exports.RequestMethod.Put;\n            case 'DELETE':\n                return exports.RequestMethod.Delete;\n            case 'OPTIONS':\n                return exports.RequestMethod.Options;\n            case 'HEAD':\n                return exports.RequestMethod.Head;\n            case 'PATCH':\n                return exports.RequestMethod.Patch;\n        }\n        throw new Error(\"Invalid request method. The method \\\"\" + method + \"\\\" is not supported.\");\n    }\n    var isSuccess = function (status) { return (status >= 200 && status < 300); };\n    function getResponseURL(xhr) {\n        if ('responseURL' in xhr) {\n            return xhr.responseURL;\n        }\n        if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n            return xhr.getResponseHeader('X-Request-URL');\n        }\n        return;\n    }\n    function stringToArrayBuffer(input) {\n        var view = new Uint16Array(input.length);\n        for (var i = 0, strLen = input.length; i < strLen; i++) {\n            view[i] = input.charCodeAt(i);\n        }\n        return view.buffer;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function paramParser(rawParams) {\n        if (rawParams === void 0) { rawParams = ''; }\n        var map = new Map();\n        if (rawParams.length > 0) {\n            var params = rawParams.split('&');\n            params.forEach(function (param) {\n                var eqIdx = param.indexOf('=');\n                var _a = eqIdx == -1 ? [param, ''] : [param.slice(0, eqIdx), param.slice(eqIdx + 1)], key = _a[0], val = _a[1];\n                var list = map.get(key) || [];\n                list.push(val);\n                map.set(key, list);\n            });\n        }\n        return map;\n    }\n    /**\n     * @experimental\n     **/\n    var QueryEncoder = (function () {\n        function QueryEncoder() {\n        }\n        QueryEncoder.prototype.encodeKey = function (k) { return standardEncoding(k); };\n        QueryEncoder.prototype.encodeValue = function (v) { return standardEncoding(v); };\n        return QueryEncoder;\n    }());\n    function standardEncoding(v) {\n        return encodeURIComponent(v)\n            .replace(/%40/gi, '@')\n            .replace(/%3A/gi, ':')\n            .replace(/%24/gi, '$')\n            .replace(/%2C/gi, ',')\n            .replace(/%3B/gi, ';')\n            .replace(/%2B/gi, '+')\n            .replace(/%3D/gi, '=')\n            .replace(/%3F/gi, '?')\n            .replace(/%2F/gi, '/');\n    }\n    /**\n     * Map-like representation of url search parameters, based on\n     * [URLSearchParams](https://url.spec.whatwg.org/#urlsearchparams) in the url living standard,\n     * with several extensions for merging URLSearchParams objects:\n     *   - setAll()\n     *   - appendAll()\n     *   - replaceAll()\n     *\n     * This class accepts an optional second parameter of ${@link QueryEncoder},\n     * which is used to serialize parameters before making a request. By default,\n     * `QueryEncoder` encodes keys and values of parameters using `encodeURIComponent`,\n     * and then un-encodes certain characters that are allowed to be part of the query\n     * according to IETF RFC 3986: https://tools.ietf.org/html/rfc3986.\n     *\n     * These are the characters that are not encoded: `! $ \\' ( ) * + , ; A 9 - . _ ~ ? /`\n     *\n     * If the set of allowed query characters is not acceptable for a particular backend,\n     * `QueryEncoder` can be subclassed and provided as the 2nd argument to URLSearchParams.\n     *\n     * ```\n     * import {URLSearchParams, QueryEncoder} from '@angular/http';\n     * class MyQueryEncoder extends QueryEncoder {\n     *   encodeKey(k: string): string {\n     *     return myEncodingFunction(k);\n     *   }\n     *\n     *   encodeValue(v: string): string {\n     *     return myEncodingFunction(v);\n     *   }\n     * }\n     *\n     * let params = new URLSearchParams('', new MyQueryEncoder());\n     * ```\n     * @experimental\n     */\n    var URLSearchParams = (function () {\n        function URLSearchParams(rawParams, queryEncoder) {\n            if (rawParams === void 0) { rawParams = ''; }\n            if (queryEncoder === void 0) { queryEncoder = new QueryEncoder(); }\n            this.rawParams = rawParams;\n            this.queryEncoder = queryEncoder;\n            this.paramsMap = paramParser(rawParams);\n        }\n        URLSearchParams.prototype.clone = function () {\n            var clone = new URLSearchParams('', this.queryEncoder);\n            clone.appendAll(this);\n            return clone;\n        };\n        URLSearchParams.prototype.has = function (param) { return this.paramsMap.has(param); };\n        URLSearchParams.prototype.get = function (param) {\n            var storedParam = this.paramsMap.get(param);\n            return Array.isArray(storedParam) ? storedParam[0] : null;\n        };\n        URLSearchParams.prototype.getAll = function (param) { return this.paramsMap.get(param) || []; };\n        URLSearchParams.prototype.set = function (param, val) {\n            if (val === void 0 || val === null) {\n                this.delete(param);\n                return;\n            }\n            var list = this.paramsMap.get(param) || [];\n            list.length = 0;\n            list.push(val);\n            this.paramsMap.set(param, list);\n        };\n        // A merge operation\n        // For each name-values pair in `searchParams`, perform `set(name, values[0])`\n        //\n        // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4], c=[8], b=[7]\"\n        //\n        // TODO(@caitp): document this better\n        URLSearchParams.prototype.setAll = function (searchParams) {\n            var _this = this;\n            searchParams.paramsMap.forEach(function (value, param) {\n                var list = _this.paramsMap.get(param) || [];\n                list.length = 0;\n                list.push(value[0]);\n                _this.paramsMap.set(param, list);\n            });\n        };\n        URLSearchParams.prototype.append = function (param, val) {\n            if (val === void 0 || val === null)\n                return;\n            var list = this.paramsMap.get(param) || [];\n            list.push(val);\n            this.paramsMap.set(param, list);\n        };\n        // A merge operation\n        // For each name-values pair in `searchParams`, perform `append(name, value)`\n        // for each value in `values`.\n        //\n        // E.g: \"a=[1,2], c=[8]\" + \"a=[3,4], b=[7]\" = \"a=[1,2,3,4], c=[8], b=[7]\"\n        //\n        // TODO(@caitp): document this better\n        URLSearchParams.prototype.appendAll = function (searchParams) {\n            var _this = this;\n            searchParams.paramsMap.forEach(function (value, param) {\n                var list = _this.paramsMap.get(param) || [];\n                for (var i = 0; i < value.length; ++i) {\n                    list.push(value[i]);\n                }\n                _this.paramsMap.set(param, list);\n            });\n        };\n        // A merge operation\n        // For each name-values pair in `searchParams`, perform `delete(name)`,\n        // followed by `set(name, values)`\n        //\n        // E.g: \"a=[1,2,3], c=[8]\" + \"a=[4,5,6], b=[7]\" = \"a=[4,5,6], c=[8], b=[7]\"\n        //\n        // TODO(@caitp): document this better\n        URLSearchParams.prototype.replaceAll = function (searchParams) {\n            var _this = this;\n            searchParams.paramsMap.forEach(function (value, param) {\n                var list = _this.paramsMap.get(param) || [];\n                list.length = 0;\n                for (var i = 0; i < value.length; ++i) {\n                    list.push(value[i]);\n                }\n                _this.paramsMap.set(param, list);\n            });\n        };\n        URLSearchParams.prototype.toString = function () {\n            var _this = this;\n            var paramsList = [];\n            this.paramsMap.forEach(function (values, k) {\n                values.forEach(function (v) { return paramsList.push(_this.queryEncoder.encodeKey(k) + '=' + _this.queryEncoder.encodeValue(v)); });\n            });\n            return paramsList.join('&');\n        };\n        URLSearchParams.prototype.delete = function (param) { this.paramsMap.delete(param); };\n        return URLSearchParams;\n    }());\n\n    /**\n     * HTTP request body used by both {@link Request} and {@link Response}\n     * https://fetch.spec.whatwg.org/#body\n     */\n    var Body = (function () {\n        function Body() {\n        }\n        /**\n         * Attempts to return body as parsed `JSON` object, or raises an exception.\n         */\n        Body.prototype.json = function () {\n            if (typeof this._body === 'string') {\n                return JSON.parse(this._body);\n            }\n            if (this._body instanceof ArrayBuffer) {\n                return JSON.parse(this.text());\n            }\n            return this._body;\n        };\n        /**\n         * Returns the body as a string, presuming `toString()` can be called on the response body.\n         */\n        Body.prototype.text = function () {\n            if (this._body instanceof URLSearchParams) {\n                return this._body.toString();\n            }\n            if (this._body instanceof ArrayBuffer) {\n                return String.fromCharCode.apply(null, new Uint16Array(this._body));\n            }\n            if (this._body === null) {\n                return '';\n            }\n            if (typeof this._body === 'object') {\n                return JSON.stringify(this._body, null, 2);\n            }\n            return this._body.toString();\n        };\n        /**\n         * Return the body as an ArrayBuffer\n         */\n        Body.prototype.arrayBuffer = function () {\n            if (this._body instanceof ArrayBuffer) {\n                return this._body;\n            }\n            return stringToArrayBuffer(this.text());\n        };\n        /**\n          * Returns the request's body as a Blob, assuming that body exists.\n          */\n        Body.prototype.blob = function () {\n            if (this._body instanceof Blob) {\n                return this._body;\n            }\n            if (this._body instanceof ArrayBuffer) {\n                return new Blob([this._body]);\n            }\n            throw new Error('The request body isn\\'t either a blob or an array buffer');\n        };\n        return Body;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$2 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * Creates `Response` instances from provided values.\n     *\n     * Though this object isn't\n     * usually instantiated by end-users, it is the primary object interacted with when it comes time to\n     * add data to a view.\n     *\n     * ### Example\n     *\n     * ```\n     * http.request('my-friends.txt').subscribe(response => this.friends = response.text());\n     * ```\n     *\n     * The Response's interface is inspired by the Response constructor defined in the [Fetch\n     * Spec](https://fetch.spec.whatwg.org/#response-class), but is considered a static value whose body\n     * can be accessed many times. There are other differences in the implementation, but this is the\n     * most significant.\n     *\n     * @experimental\n     */\n    var Response = (function (_super) {\n        __extends$2(Response, _super);\n        function Response(responseOptions) {\n            _super.call(this);\n            this._body = responseOptions.body;\n            this.status = responseOptions.status;\n            this.ok = (this.status >= 200 && this.status <= 299);\n            this.statusText = responseOptions.statusText;\n            this.headers = responseOptions.headers;\n            this.type = responseOptions.type;\n            this.url = responseOptions.url;\n        }\n        Response.prototype.toString = function () {\n            return \"Response with status: \" + this.status + \" \" + this.statusText + \" for URL: \" + this.url;\n        };\n        return Response;\n    }(Body));\n\n    var _nextRequestId = 0;\n    var JSONP_HOME = '__ng_jsonp__';\n    var _jsonpConnections = null;\n    function _getJsonpConnections() {\n        var w = typeof window == 'object' ? window : {};\n        if (_jsonpConnections === null) {\n            _jsonpConnections = w[JSONP_HOME] = {};\n        }\n        return _jsonpConnections;\n    }\n    // Make sure not to evaluate this in a non-browser environment!\n    var BrowserJsonp = (function () {\n        function BrowserJsonp() {\n        }\n        // Construct a <script> element with the specified URL\n        BrowserJsonp.prototype.build = function (url) {\n            var node = document.createElement('script');\n            node.src = url;\n            return node;\n        };\n        BrowserJsonp.prototype.nextRequestID = function () { return \"__req\" + _nextRequestId++; };\n        BrowserJsonp.prototype.requestCallback = function (id) { return JSONP_HOME + \".\" + id + \".finished\"; };\n        BrowserJsonp.prototype.exposeConnection = function (id, connection) {\n            var connections = _getJsonpConnections();\n            connections[id] = connection;\n        };\n        BrowserJsonp.prototype.removeConnection = function (id) {\n            var connections = _getJsonpConnections();\n            connections[id] = null;\n        };\n        // Attach the <script> element to the DOM\n        BrowserJsonp.prototype.send = function (node) { document.body.appendChild((node)); };\n        // Remove <script> element from the DOM\n        BrowserJsonp.prototype.cleanup = function (node) {\n            if (node.parentNode) {\n                node.parentNode.removeChild((node));\n            }\n        };\n        BrowserJsonp.decorators = [\n            { type: _angular_core.Injectable },\n        ];\n        /** @nocollapse */\n        BrowserJsonp.ctorParameters = [];\n        return BrowserJsonp;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n    var JSONP_ERR_WRONG_METHOD = 'JSONP requests must use GET request method.';\n    /**\n     * Abstract base class for an in-flight JSONP request.\n     *\n     * @experimental\n     */\n    var JSONPConnection = (function () {\n        function JSONPConnection() {\n        }\n        return JSONPConnection;\n    }());\n    var JSONPConnection_ = (function (_super) {\n        __extends(JSONPConnection_, _super);\n        function JSONPConnection_(req, _dom, baseResponseOptions) {\n            var _this = this;\n            _super.call(this);\n            this._dom = _dom;\n            this.baseResponseOptions = baseResponseOptions;\n            this._finished = false;\n            if (req.method !== exports.RequestMethod.Get) {\n                throw new TypeError(JSONP_ERR_WRONG_METHOD);\n            }\n            this.request = req;\n            this.response = new rxjs_Observable.Observable(function (responseObserver) {\n                _this.readyState = exports.ReadyState.Loading;\n                var id = _this._id = _dom.nextRequestID();\n                _dom.exposeConnection(id, _this);\n                // Workaround Dart\n                // url = url.replace(/=JSONP_CALLBACK(&|$)/, `generated method`);\n                var callback = _dom.requestCallback(_this._id);\n                var url = req.url;\n                if (url.indexOf('=JSONP_CALLBACK&') > -1) {\n                    url = url.replace('=JSONP_CALLBACK&', \"=\" + callback + \"&\");\n                }\n                else if (url.lastIndexOf('=JSONP_CALLBACK') === url.length - '=JSONP_CALLBACK'.length) {\n                    url = url.substring(0, url.length - '=JSONP_CALLBACK'.length) + (\"=\" + callback);\n                }\n                var script = _this._script = _dom.build(url);\n                var onLoad = function (event) {\n                    if (_this.readyState === exports.ReadyState.Cancelled)\n                        return;\n                    _this.readyState = exports.ReadyState.Done;\n                    _dom.cleanup(script);\n                    if (!_this._finished) {\n                        var responseOptions_1 = new ResponseOptions({ body: JSONP_ERR_NO_CALLBACK, type: exports.ResponseType.Error, url: url });\n                        if (baseResponseOptions) {\n                            responseOptions_1 = baseResponseOptions.merge(responseOptions_1);\n                        }\n                        responseObserver.error(new Response(responseOptions_1));\n                        return;\n                    }\n                    var responseOptions = new ResponseOptions({ body: _this._responseData, url: url });\n                    if (_this.baseResponseOptions) {\n                        responseOptions = _this.baseResponseOptions.merge(responseOptions);\n                    }\n                    responseObserver.next(new Response(responseOptions));\n                    responseObserver.complete();\n                };\n                var onError = function (error) {\n                    if (_this.readyState === exports.ReadyState.Cancelled)\n                        return;\n                    _this.readyState = exports.ReadyState.Done;\n                    _dom.cleanup(script);\n                    var responseOptions = new ResponseOptions({ body: error.message, type: exports.ResponseType.Error });\n                    if (baseResponseOptions) {\n                        responseOptions = baseResponseOptions.merge(responseOptions);\n                    }\n                    responseObserver.error(new Response(responseOptions));\n                };\n                script.addEventListener('load', onLoad);\n                script.addEventListener('error', onError);\n                _dom.send(script);\n                return function () {\n                    _this.readyState = exports.ReadyState.Cancelled;\n                    script.removeEventListener('load', onLoad);\n                    script.removeEventListener('error', onError);\n                    _this._dom.cleanup(script);\n                };\n            });\n        }\n        JSONPConnection_.prototype.finished = function (data) {\n            // Don't leak connections\n            this._finished = true;\n            this._dom.removeConnection(this._id);\n            if (this.readyState === exports.ReadyState.Cancelled)\n                return;\n            this._responseData = data;\n        };\n        return JSONPConnection_;\n    }(JSONPConnection));\n    /**\n     * A {@link ConnectionBackend} that uses the JSONP strategy of making requests.\n     *\n     * @experimental\n     */\n    var JSONPBackend = (function (_super) {\n        __extends(JSONPBackend, _super);\n        function JSONPBackend() {\n            _super.apply(this, arguments);\n        }\n        return JSONPBackend;\n    }(ConnectionBackend));\n    var JSONPBackend_ = (function (_super) {\n        __extends(JSONPBackend_, _super);\n        function JSONPBackend_(_browserJSONP, _baseResponseOptions) {\n            _super.call(this);\n            this._browserJSONP = _browserJSONP;\n            this._baseResponseOptions = _baseResponseOptions;\n        }\n        JSONPBackend_.prototype.createConnection = function (request) {\n            return new JSONPConnection_(request, this._browserJSONP, this._baseResponseOptions);\n        };\n        JSONPBackend_.decorators = [\n            { type: _angular_core.Injectable },\n        ];\n        /** @nocollapse */\n        JSONPBackend_.ctorParameters = [\n            { type: BrowserJsonp, },\n            { type: ResponseOptions, },\n        ];\n        return JSONPBackend_;\n    }(JSONPBackend));\n\n    var XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n    /**\n     * Creates connections using `XMLHttpRequest`. Given a fully-qualified\n     * request, an `XHRConnection` will immediately create an `XMLHttpRequest` object and send the\n     * request.\n     *\n     * This class would typically not be created or interacted with directly inside applications, though\n     * the {@link MockConnection} may be interacted with in tests.\n     *\n     * @experimental\n     */\n    var XHRConnection = (function () {\n        function XHRConnection(req, browserXHR, baseResponseOptions) {\n            var _this = this;\n            this.request = req;\n            this.response = new rxjs_Observable.Observable(function (responseObserver) {\n                var _xhr = browserXHR.build();\n                _xhr.open(exports.RequestMethod[req.method].toUpperCase(), req.url);\n                if (req.withCredentials != null) {\n                    _xhr.withCredentials = req.withCredentials;\n                }\n                // load event handler\n                var onLoad = function () {\n                    // normalize IE9 bug (http://bugs.jquery.com/ticket/1450)\n                    var status = _xhr.status === 1223 ? 204 : _xhr.status;\n                    var body = null;\n                    // HTTP 204 means no content\n                    if (status !== 204) {\n                        // responseText is the old-school way of retrieving response (supported by IE8 & 9)\n                        // response/responseType properties were introduced in ResourceLoader Level2 spec\n                        // (supported by IE10)\n                        body = (typeof _xhr.response === 'undefined') ? _xhr.responseText : _xhr.response;\n                        // Implicitly strip a potential XSSI prefix.\n                        if (typeof body === 'string') {\n                            body = body.replace(XSSI_PREFIX, '');\n                        }\n                    }\n                    // fix status code when it is 0 (0 status is undocumented).\n                    // Occurs when accessing file resources or on Android 4.1 stock browser\n                    // while retrieving files from application cache.\n                    if (status === 0) {\n                        status = body ? 200 : 0;\n                    }\n                    var headers = Headers.fromResponseHeaderString(_xhr.getAllResponseHeaders());\n                    // IE 9 does not provide the way to get URL of response\n                    var url = getResponseURL(_xhr) || req.url;\n                    var statusText = _xhr.statusText || 'OK';\n                    var responseOptions = new ResponseOptions({ body: body, status: status, headers: headers, statusText: statusText, url: url });\n                    if (baseResponseOptions != null) {\n                        responseOptions = baseResponseOptions.merge(responseOptions);\n                    }\n                    var response = new Response(responseOptions);\n                    response.ok = isSuccess(status);\n                    if (response.ok) {\n                        responseObserver.next(response);\n                        // TODO(gdi2290): defer complete if array buffer until done\n                        responseObserver.complete();\n                        return;\n                    }\n                    responseObserver.error(response);\n                };\n                // error event handler\n                var onError = function (err) {\n                    var responseOptions = new ResponseOptions({\n                        body: err,\n                        type: exports.ResponseType.Error,\n                        status: _xhr.status,\n                        statusText: _xhr.statusText,\n                    });\n                    if (baseResponseOptions != null) {\n                        responseOptions = baseResponseOptions.merge(responseOptions);\n                    }\n                    responseObserver.error(new Response(responseOptions));\n                };\n                _this.setDetectedContentType(req, _xhr);\n                if (req.headers != null) {\n                    req.headers.forEach(function (values, name) { return _xhr.setRequestHeader(name, values.join(',')); });\n                }\n                // Select the correct buffer type to store the response\n                if (req.responseType != null && _xhr.responseType != null) {\n                    switch (req.responseType) {\n                        case exports.ResponseContentType.ArrayBuffer:\n                            _xhr.responseType = 'arraybuffer';\n                            break;\n                        case exports.ResponseContentType.Json:\n                            _xhr.responseType = 'json';\n                            break;\n                        case exports.ResponseContentType.Text:\n                            _xhr.responseType = 'text';\n                            break;\n                        case exports.ResponseContentType.Blob:\n                            _xhr.responseType = 'blob';\n                            break;\n                        default:\n                            throw new Error('The selected responseType is not supported');\n                    }\n                }\n                _xhr.addEventListener('load', onLoad);\n                _xhr.addEventListener('error', onError);\n                _xhr.send(_this.request.getBody());\n                return function () {\n                    _xhr.removeEventListener('load', onLoad);\n                    _xhr.removeEventListener('error', onError);\n                    _xhr.abort();\n                };\n            });\n        }\n        XHRConnection.prototype.setDetectedContentType = function (req /** TODO Request */, _xhr /** XMLHttpRequest */) {\n            // Skip if a custom Content-Type header is provided\n            if (req.headers != null && req.headers.get('Content-Type') != null) {\n                return;\n            }\n            // Set the detected content type\n            switch (req.contentType) {\n                case ContentType.NONE:\n                    break;\n                case ContentType.JSON:\n                    _xhr.setRequestHeader('content-type', 'application/json');\n                    break;\n                case ContentType.FORM:\n                    _xhr.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');\n                    break;\n                case ContentType.TEXT:\n                    _xhr.setRequestHeader('content-type', 'text/plain');\n                    break;\n                case ContentType.BLOB:\n                    var blob = req.blob();\n                    if (blob.type) {\n                        _xhr.setRequestHeader('content-type', blob.type);\n                    }\n                    break;\n            }\n        };\n        return XHRConnection;\n    }());\n    /**\n     * `XSRFConfiguration` sets up Cross Site Request Forgery (XSRF) protection for the application\n     * using a cookie. See {@link https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)}\n     * for more information on XSRF.\n     *\n     * Applications can configure custom cookie and header names by binding an instance of this class\n     * with different `cookieName` and `headerName` values. See the main HTTP documentation for more\n     * details.\n     *\n     * @experimental\n     */\n    var CookieXSRFStrategy = (function () {\n        function CookieXSRFStrategy(_cookieName, _headerName) {\n            if (_cookieName === void 0) { _cookieName = 'XSRF-TOKEN'; }\n            if (_headerName === void 0) { _headerName = 'X-XSRF-TOKEN'; }\n            this._cookieName = _cookieName;\n            this._headerName = _headerName;\n        }\n        CookieXSRFStrategy.prototype.configureRequest = function (req) {\n            var xsrfToken = _angular_platformBrowser.__platform_browser_private__.getDOM().getCookie(this._cookieName);\n            if (xsrfToken) {\n                req.headers.set(this._headerName, xsrfToken);\n            }\n        };\n        return CookieXSRFStrategy;\n    }());\n    /**\n     * Creates {@link XHRConnection} instances.\n     *\n     * This class would typically not be used by end users, but could be\n     * overridden if a different backend implementation should be used,\n     * such as in a node backend.\n     *\n     * ### Example\n     *\n     * ```\n     * import {Http, MyNodeBackend, HTTP_PROVIDERS, BaseRequestOptions} from '@angular/http';\n     * @Component({\n     *   viewProviders: [\n     *     HTTP_PROVIDERS,\n     *     {provide: Http, useFactory: (backend, options) => {\n     *       return new Http(backend, options);\n     *     }, deps: [MyNodeBackend, BaseRequestOptions]}]\n     * })\n     * class MyComponent {\n     *   constructor(http:Http) {\n     *     http.request('people.json').subscribe(res => this.people = res.json());\n     *   }\n     * }\n     * ```\n     * @experimental\n     */\n    var XHRBackend = (function () {\n        function XHRBackend(_browserXHR, _baseResponseOptions, _xsrfStrategy) {\n            this._browserXHR = _browserXHR;\n            this._baseResponseOptions = _baseResponseOptions;\n            this._xsrfStrategy = _xsrfStrategy;\n        }\n        XHRBackend.prototype.createConnection = function (request) {\n            this._xsrfStrategy.configureRequest(request);\n            return new XHRConnection(request, this._browserXHR, this._baseResponseOptions);\n        };\n        XHRBackend.decorators = [\n            { type: _angular_core.Injectable },\n        ];\n        /** @nocollapse */\n        XHRBackend.ctorParameters = [\n            { type: BrowserXhr, },\n            { type: ResponseOptions, },\n            { type: XSRFStrategy, },\n        ];\n        return XHRBackend;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$3 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * Creates a request options object to be optionally provided when instantiating a\n     * {@link Request}.\n     *\n     * This class is based on the `RequestInit` description in the [Fetch\n     * Spec](https://fetch.spec.whatwg.org/#requestinit).\n     *\n     * All values are null by default. Typical defaults can be found in the {@link BaseRequestOptions}\n     * class, which sub-classes `RequestOptions`.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/7Wvi3lfLq41aQPKlxB4O?p=preview))\n     *\n     * ```typescript\n     * import {RequestOptions, Request, RequestMethod} from '@angular/http';\n     *\n     * var options = new RequestOptions({\n     *   method: RequestMethod.Post,\n     *   url: 'https://google.com'\n     * });\n     * var req = new Request(options);\n     * console.log('req.method:', RequestMethod[req.method]); // Post\n     * console.log('options.url:', options.url); // https://google.com\n     * ```\n     *\n     * @experimental\n     */\n    var RequestOptions = (function () {\n        function RequestOptions(_a) {\n            var _b = _a === void 0 ? {} : _a, method = _b.method, headers = _b.headers, body = _b.body, url = _b.url, search = _b.search, withCredentials = _b.withCredentials, responseType = _b.responseType;\n            this.method = method != null ? normalizeMethodName(method) : null;\n            this.headers = headers != null ? headers : null;\n            this.body = body != null ? body : null;\n            this.url = url != null ? url : null;\n            this.search =\n                search != null ? (typeof search === 'string' ? new URLSearchParams(search) : search) : null;\n            this.withCredentials = withCredentials != null ? withCredentials : null;\n            this.responseType = responseType != null ? responseType : null;\n        }\n        /**\n         * Creates a copy of the `RequestOptions` instance, using the optional input as values to override\n         * existing values. This method will not change the values of the instance on which it is being\n         * called.\n         *\n         * Note that `headers` and `search` will override existing values completely if present in\n         * the `options` object. If these values should be merged, it should be done prior to calling\n         * `merge` on the `RequestOptions` instance.\n         *\n         * ### Example ([live demo](http://plnkr.co/edit/6w8XA8YTkDRcPYpdB9dk?p=preview))\n         *\n         * ```typescript\n         * import {RequestOptions, Request, RequestMethod} from '@angular/http';\n         *\n         * var options = new RequestOptions({\n         *   method: RequestMethod.Post\n         * });\n         * var req = new Request(options.merge({\n         *   url: 'https://google.com'\n         * }));\n         * console.log('req.method:', RequestMethod[req.method]); // Post\n         * console.log('options.url:', options.url); // null\n         * console.log('req.url:', req.url); // https://google.com\n         * ```\n         */\n        RequestOptions.prototype.merge = function (options) {\n            return new RequestOptions({\n                method: options && options.method != null ? options.method : this.method,\n                headers: options && options.headers != null ? options.headers : this.headers,\n                body: options && options.body != null ? options.body : this.body,\n                url: options && options.url != null ? options.url : this.url,\n                search: options && options.search != null ?\n                    (typeof options.search === 'string' ? new URLSearchParams(options.search) :\n                        options.search.clone()) :\n                    this.search,\n                withCredentials: options && options.withCredentials != null ? options.withCredentials :\n                    this.withCredentials,\n                responseType: options && options.responseType != null ? options.responseType :\n                    this.responseType\n            });\n        };\n        return RequestOptions;\n    }());\n    /**\n     * Subclass of {@link RequestOptions}, with default values.\n     *\n     * Default values:\n     *  * method: {@link RequestMethod RequestMethod.Get}\n     *  * headers: empty {@link Headers} object\n     *\n     * This class could be extended and bound to the {@link RequestOptions} class\n     * when configuring an {@link Injector}, in order to override the default options\n     * used by {@link Http} to create and send {@link Request Requests}.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/LEKVSx?p=preview))\n     *\n     * ```typescript\n     * import {provide} from '@angular/core';\n     * import {bootstrap} from '@angular/platform-browser/browser';\n     * import {HTTP_PROVIDERS, Http, BaseRequestOptions, RequestOptions} from '@angular/http';\n     * import {App} from './myapp';\n     *\n     * class MyOptions extends BaseRequestOptions {\n     *   search: string = 'coreTeam=true';\n     * }\n     *\n     * bootstrap(App, [HTTP_PROVIDERS, {provide: RequestOptions, useClass: MyOptions}]);\n     * ```\n     *\n     * The options could also be extended when manually creating a {@link Request}\n     * object.\n     *\n     * ### Example ([live demo](http://plnkr.co/edit/oyBoEvNtDhOSfi9YxaVb?p=preview))\n     *\n     * ```\n     * import {BaseRequestOptions, Request, RequestMethod} from '@angular/http';\n     *\n     * var options = new BaseRequestOptions();\n     * var req = new Request(options.merge({\n     *   method: RequestMethod.Post,\n     *   url: 'https://google.com'\n     * }));\n     * console.log('req.method:', RequestMethod[req.method]); // Post\n     * console.log('options.url:', options.url); // null\n     * console.log('req.url:', req.url); // https://google.com\n     * ```\n     *\n     * @experimental\n     */\n    var BaseRequestOptions = (function (_super) {\n        __extends$3(BaseRequestOptions, _super);\n        function BaseRequestOptions() {\n            _super.call(this, { method: exports.RequestMethod.Get, headers: new Headers() });\n        }\n        BaseRequestOptions.decorators = [\n            { type: _angular_core.Injectable },\n        ];\n        /** @nocollapse */\n        BaseRequestOptions.ctorParameters = [];\n        return BaseRequestOptions;\n    }(RequestOptions));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$5 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    // TODO(jeffbcross): properly implement body accessors\n    /**\n     * Creates `Request` instances from provided values.\n     *\n     * The Request's interface is inspired by the Request constructor defined in the [Fetch\n     * Spec](https://fetch.spec.whatwg.org/#request-class),\n     * but is considered a static value whose body can be accessed many times. There are other\n     * differences in the implementation, but this is the most significant.\n     *\n     * `Request` instances are typically created by higher-level classes, like {@link Http} and\n     * {@link Jsonp}, but it may occasionally be useful to explicitly create `Request` instances.\n     * One such example is when creating services that wrap higher-level services, like {@link Http},\n     * where it may be useful to generate a `Request` with arbitrary headers and search params.\n     *\n     * ```typescript\n     * import {Injectable, Injector} from '@angular/core';\n     * import {HTTP_PROVIDERS, Http, Request, RequestMethod} from '@angular/http';\n     *\n     * @Injectable()\n     * class AutoAuthenticator {\n     *   constructor(public http:Http) {}\n     *   request(url:string) {\n     *     return this.http.request(new Request({\n     *       method: RequestMethod.Get,\n     *       url: url,\n     *       search: 'password=123'\n     *     }));\n     *   }\n     * }\n     *\n     * var injector = Injector.resolveAndCreate([HTTP_PROVIDERS, AutoAuthenticator]);\n     * var authenticator = injector.get(AutoAuthenticator);\n     * authenticator.request('people.json').subscribe(res => {\n     *   //URL should have included '?password=123'\n     *   console.log('people', res.json());\n     * });\n     * ```\n     *\n     * @experimental\n     */\n    var Request = (function (_super) {\n        __extends$5(Request, _super);\n        function Request(requestOptions) {\n            _super.call(this);\n            // TODO: assert that url is present\n            var url = requestOptions.url;\n            this.url = requestOptions.url;\n            if (requestOptions.search) {\n                var search = requestOptions.search.toString();\n                if (search.length > 0) {\n                    var prefix = '?';\n                    if (this.url.indexOf('?') != -1) {\n                        prefix = (this.url[this.url.length - 1] == '&') ? '' : '&';\n                    }\n                    // TODO: just delete search-query-looking string in url?\n                    this.url = url + prefix + search;\n                }\n            }\n            this._body = requestOptions.body;\n            this.method = normalizeMethodName(requestOptions.method);\n            // TODO(jeffbcross): implement behavior\n            // Defaults to 'omit', consistent with browser\n            this.headers = new Headers(requestOptions.headers);\n            this.contentType = this.detectContentType();\n            this.withCredentials = requestOptions.withCredentials;\n            this.responseType = requestOptions.responseType;\n        }\n        /**\n         * Returns the content type enum based on header options.\n         */\n        Request.prototype.detectContentType = function () {\n            switch (this.headers.get('content-type')) {\n                case 'application/json':\n                    return ContentType.JSON;\n                case 'application/x-www-form-urlencoded':\n                    return ContentType.FORM;\n                case 'multipart/form-data':\n                    return ContentType.FORM_DATA;\n                case 'text/plain':\n                case 'text/html':\n                    return ContentType.TEXT;\n                case 'application/octet-stream':\n                    return ContentType.BLOB;\n                default:\n                    return this.detectContentTypeFromBody();\n            }\n        };\n        /**\n         * Returns the content type of request's body based on its type.\n         */\n        Request.prototype.detectContentTypeFromBody = function () {\n            if (this._body == null) {\n                return ContentType.NONE;\n            }\n            else if (this._body instanceof URLSearchParams) {\n                return ContentType.FORM;\n            }\n            else if (this._body instanceof FormData) {\n                return ContentType.FORM_DATA;\n            }\n            else if (this._body instanceof Blob$1) {\n                return ContentType.BLOB;\n            }\n            else if (this._body instanceof ArrayBuffer$1) {\n                return ContentType.ARRAY_BUFFER;\n            }\n            else if (this._body && typeof this._body == 'object') {\n                return ContentType.JSON;\n            }\n            else {\n                return ContentType.TEXT;\n            }\n        };\n        /**\n         * Returns the request's body according to its type. If body is undefined, return\n         * null.\n         */\n        Request.prototype.getBody = function () {\n            switch (this.contentType) {\n                case ContentType.JSON:\n                    return this.text();\n                case ContentType.FORM:\n                    return this.text();\n                case ContentType.FORM_DATA:\n                    return this._body;\n                case ContentType.TEXT:\n                    return this.text();\n                case ContentType.BLOB:\n                    return this.blob();\n                case ContentType.ARRAY_BUFFER:\n                    return this.arrayBuffer();\n                default:\n                    return null;\n            }\n        };\n        return Request;\n    }(Body));\n    var noop = function () { };\n    var w = typeof window == 'object' ? window : noop;\n    var FormData = w['FormData'] || noop;\n    var Blob$1 = w['Blob'] || noop;\n    var ArrayBuffer$1 = w['ArrayBuffer'] || noop;\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$4 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    function httpRequest(backend, request) {\n        return backend.createConnection(request).response;\n    }\n    function mergeOptions(defaultOpts, providedOpts, method, url) {\n        var newOptions = defaultOpts;\n        if (providedOpts) {\n            // Hack so Dart can used named parameters\n            return newOptions.merge(new RequestOptions({\n                method: providedOpts.method || method,\n                url: providedOpts.url || url,\n                search: providedOpts.search,\n                headers: providedOpts.headers,\n                body: providedOpts.body,\n                withCredentials: providedOpts.withCredentials,\n                responseType: providedOpts.responseType\n            }));\n        }\n        return newOptions.merge(new RequestOptions({ method: method, url: url }));\n    }\n    /**\n     * Performs http requests using `XMLHttpRequest` as the default backend.\n     *\n     * `Http` is available as an injectable class, with methods to perform http requests. Calling\n     * `request` returns an `Observable` which will emit a single {@link Response} when a\n     * response is received.\n     *\n     * ### Example\n     *\n     * ```typescript\n     * import {Http, HTTP_PROVIDERS} from '@angular/http';\n     * import 'rxjs/add/operator/map'\n     * @Component({\n     *   selector: 'http-app',\n     *   viewProviders: [HTTP_PROVIDERS],\n     *   templateUrl: 'people.html'\n     * })\n     * class PeopleComponent {\n     *   constructor(http: Http) {\n     *     http.get('people.json')\n     *       // Call map on the response observable to get the parsed people object\n     *       .map(res => res.json())\n     *       // Subscribe to the observable to get the parsed people object and attach it to the\n     *       // component\n     *       .subscribe(people => this.people = people);\n     *   }\n     * }\n     * ```\n     *\n     *\n     * ### Example\n     *\n     * ```\n     * http.get('people.json').subscribe((res:Response) => this.people = res.json());\n     * ```\n     *\n     * The default construct used to perform requests, `XMLHttpRequest`, is abstracted as a \"Backend\" (\n     * {@link XHRBackend} in this case), which could be mocked with dependency injection by replacing\n     * the {@link XHRBackend} provider, as in the following example:\n     *\n     * ### Example\n     *\n     * ```typescript\n     * import {BaseRequestOptions, Http} from '@angular/http';\n     * import {MockBackend} from '@angular/http/testing';\n     * var injector = Injector.resolveAndCreate([\n     *   BaseRequestOptions,\n     *   MockBackend,\n     *   {provide: Http, useFactory:\n     *       function(backend, defaultOptions) {\n     *         return new Http(backend, defaultOptions);\n     *       },\n     *       deps: [MockBackend, BaseRequestOptions]}\n     * ]);\n     * var http = injector.get(Http);\n     * http.get('request-from-mock-backend.json').subscribe((res:Response) => doSomething(res));\n     * ```\n     *\n     * @experimental\n     */\n    var Http = (function () {\n        function Http(_backend, _defaultOptions) {\n            this._backend = _backend;\n            this._defaultOptions = _defaultOptions;\n        }\n        /**\n         * Performs any type of http request. First argument is required, and can either be a url or\n         * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}\n         * object can be provided as the 2nd argument. The options object will be merged with the values\n         * of {@link BaseRequestOptions} before performing the request.\n         */\n        Http.prototype.request = function (url, options) {\n            var responseObservable;\n            if (typeof url === 'string') {\n                responseObservable = httpRequest(this._backend, new Request(mergeOptions(this._defaultOptions, options, exports.RequestMethod.Get, url)));\n            }\n            else if (url instanceof Request) {\n                responseObservable = httpRequest(this._backend, url);\n            }\n            else {\n                throw new Error('First argument must be a url string or Request instance.');\n            }\n            return responseObservable;\n        };\n        /**\n         * Performs a request with `get` http method.\n         */\n        Http.prototype.get = function (url, options) {\n            return this.request(new Request(mergeOptions(this._defaultOptions, options, exports.RequestMethod.Get, url)));\n        };\n        /**\n         * Performs a request with `post` http method.\n         */\n        Http.prototype.post = function (url, body, options) {\n            return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, exports.RequestMethod.Post, url)));\n        };\n        /**\n         * Performs a request with `put` http method.\n         */\n        Http.prototype.put = function (url, body, options) {\n            return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, exports.RequestMethod.Put, url)));\n        };\n        /**\n         * Performs a request with `delete` http method.\n         */\n        Http.prototype.delete = function (url, options) {\n            return this.request(new Request(mergeOptions(this._defaultOptions, options, exports.RequestMethod.Delete, url)));\n        };\n        /**\n         * Performs a request with `patch` http method.\n         */\n        Http.prototype.patch = function (url, body, options) {\n            return this.request(new Request(mergeOptions(this._defaultOptions.merge(new RequestOptions({ body: body })), options, exports.RequestMethod.Patch, url)));\n        };\n        /**\n         * Performs a request with `head` http method.\n         */\n        Http.prototype.head = function (url, options) {\n            return this.request(new Request(mergeOptions(this._defaultOptions, options, exports.RequestMethod.Head, url)));\n        };\n        /**\n         * Performs a request with `options` http method.\n         */\n        Http.prototype.options = function (url, options) {\n            return this.request(new Request(mergeOptions(this._defaultOptions, options, exports.RequestMethod.Options, url)));\n        };\n        Http.decorators = [\n            { type: _angular_core.Injectable },\n        ];\n        /** @nocollapse */\n        Http.ctorParameters = [\n            { type: ConnectionBackend, },\n            { type: RequestOptions, },\n        ];\n        return Http;\n    }());\n    /**\n     * @experimental\n     */\n    var Jsonp = (function (_super) {\n        __extends$4(Jsonp, _super);\n        function Jsonp(backend, defaultOptions) {\n            _super.call(this, backend, defaultOptions);\n        }\n        /**\n         * Performs any type of http request. First argument is required, and can either be a url or\n         * a {@link Request} instance. If the first argument is a url, an optional {@link RequestOptions}\n         * object can be provided as the 2nd argument. The options object will be merged with the values\n         * of {@link BaseRequestOptions} before performing the request.\n         *\n         * @security Regular XHR is the safest alternative to JSONP for most applications, and is\n         * supported by all current browsers. Because JSONP creates a `<script>` element with\n         * contents retrieved from a remote source, attacker-controlled data introduced by an untrusted\n         * source could expose your application to XSS risks. Data exposed by JSONP may also be\n         * readable by malicious third-party websites. In addition, JSONP introduces potential risk for\n         * future security issues (e.g. content sniffing).  For more detail, see the\n         * [Security Guide](http://g.co/ng/security).\n         */\n        Jsonp.prototype.request = function (url, options) {\n            var responseObservable;\n            if (typeof url === 'string') {\n                url =\n                    new Request(mergeOptions(this._defaultOptions, options, exports.RequestMethod.Get, url));\n            }\n            if (url instanceof Request) {\n                if (url.method !== exports.RequestMethod.Get) {\n                    throw new Error('JSONP requests must use GET request method.');\n                }\n                responseObservable = httpRequest(this._backend, url);\n            }\n            else {\n                throw new Error('First argument must be a url string or Request instance.');\n            }\n            return responseObservable;\n        };\n        Jsonp.decorators = [\n            { type: _angular_core.Injectable },\n        ];\n        /** @nocollapse */\n        Jsonp.ctorParameters = [\n            { type: ConnectionBackend, },\n            { type: RequestOptions, },\n        ];\n        return Jsonp;\n    }(Http));\n\n    function _createDefaultCookieXSRFStrategy() {\n        return new CookieXSRFStrategy();\n    }\n    function httpFactory(xhrBackend, requestOptions) {\n        return new Http(xhrBackend, requestOptions);\n    }\n    function jsonpFactory(jsonpBackend, requestOptions) {\n        return new Jsonp(jsonpBackend, requestOptions);\n    }\n    /**\n     * The module that includes http's providers\n     *\n     * @experimental\n     */\n    var HttpModule = (function () {\n        function HttpModule() {\n        }\n        HttpModule.decorators = [\n            { type: _angular_core.NgModule, args: [{\n                        providers: [\n                            // TODO(pascal): use factory type annotations once supported in DI\n                            // issue: https://github.com/angular/angular/issues/3183\n                            { provide: Http, useFactory: httpFactory, deps: [XHRBackend, RequestOptions] },\n                            BrowserXhr,\n                            { provide: RequestOptions, useClass: BaseRequestOptions },\n                            { provide: ResponseOptions, useClass: BaseResponseOptions },\n                            XHRBackend,\n                            { provide: XSRFStrategy, useFactory: _createDefaultCookieXSRFStrategy },\n                        ],\n                    },] },\n        ];\n        /** @nocollapse */\n        HttpModule.ctorParameters = [];\n        return HttpModule;\n    }());\n    /**\n     * The module that includes jsonp's providers\n     *\n     * @experimental\n     */\n    var JsonpModule = (function () {\n        function JsonpModule() {\n        }\n        JsonpModule.decorators = [\n            { type: _angular_core.NgModule, args: [{\n                        providers: [\n                            // TODO(pascal): use factory type annotations once supported in DI\n                            // issue: https://github.com/angular/angular/issues/3183\n                            { provide: Jsonp, useFactory: jsonpFactory, deps: [JSONPBackend, RequestOptions] },\n                            BrowserJsonp,\n                            { provide: RequestOptions, useClass: BaseRequestOptions },\n                            { provide: ResponseOptions, useClass: BaseResponseOptions },\n                            { provide: JSONPBackend, useClass: JSONPBackend_ },\n                        ],\n                    },] },\n        ];\n        /** @nocollapse */\n        JsonpModule.ctorParameters = [];\n        return JsonpModule;\n    }());\n\n    exports.BrowserXhr = BrowserXhr;\n    exports.JSONPBackend = JSONPBackend;\n    exports.JSONPConnection = JSONPConnection;\n    exports.CookieXSRFStrategy = CookieXSRFStrategy;\n    exports.XHRBackend = XHRBackend;\n    exports.XHRConnection = XHRConnection;\n    exports.BaseRequestOptions = BaseRequestOptions;\n    exports.RequestOptions = RequestOptions;\n    exports.BaseResponseOptions = BaseResponseOptions;\n    exports.ResponseOptions = ResponseOptions;\n    exports.Headers = Headers;\n    exports.Http = Http;\n    exports.Jsonp = Jsonp;\n    exports.HttpModule = HttpModule;\n    exports.JsonpModule = JsonpModule;\n    exports.Connection = Connection;\n    exports.ConnectionBackend = ConnectionBackend;\n    exports.XSRFStrategy = XSRFStrategy;\n    exports.Request = Request;\n    exports.Response = Response;\n    exports.QueryEncoder = QueryEncoder;\n    exports.URLSearchParams = URLSearchParams;\n\n}));\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/@angular/http/bundles/http.umd.js\n ** module id = 85\n ** module chunks = 2\n **/"],"sourceRoot":""}